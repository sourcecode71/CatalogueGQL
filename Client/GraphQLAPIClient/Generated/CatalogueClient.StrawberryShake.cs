// <auto-generated/>
#nullable enable

namespace Catalogue.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddCourseDataResult : global::System.IEquatable<AddCourseDataResult>, IAddCourseDataResult
    {
        public AddCourseDataResult(global::Catalogue.Client.IAddCourseData_AddCourse addCourse)
        {
            AddCourse = addCourse;
        }

        /// <summary>
        /// Add a new course data.
        /// </summary>
        public global::Catalogue.Client.IAddCourseData_AddCourse AddCourse { get; }

        public virtual global::System.Boolean Equals(AddCourseDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddCourse.Equals(other.AddCourse));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddCourseDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddCourse.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddCourseData_AddCourse_AddCoursePayload : global::System.IEquatable<AddCourseData_AddCourse_AddCoursePayload>, IAddCourseData_AddCourse_AddCoursePayload
    {
        public AddCourseData_AddCourse_AddCoursePayload(global::Catalogue.Client.IAddCourseData_AddCourse_Course course)
        {
            Course = course;
        }

        public global::Catalogue.Client.IAddCourseData_AddCourse_Course Course { get; }

        public virtual global::System.Boolean Equals(AddCourseData_AddCourse_AddCoursePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Course.Equals(other.Course));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddCourseData_AddCourse_AddCoursePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Course.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddCourseData_AddCourse_Course_CourseDto : global::System.IEquatable<AddCourseData_AddCourse_Course_CourseDto>, IAddCourseData_AddCourse_Course_CourseDto
    {
        public AddCourseData_AddCourse_Course_CourseDto(global::System.String? title)
        {
            Title = title;
        }

        public global::System.String? Title { get; }

        public virtual global::System.Boolean Equals(AddCourseData_AddCourse_Course_CourseDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddCourseData_AddCourse_Course_CourseDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddCourseDataResult
    {
        /// <summary>
        /// Add a new course data.
        /// </summary>
        public global::Catalogue.Client.IAddCourseData_AddCourse AddCourse { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddCourseData_AddCourse
    {
        public global::Catalogue.Client.IAddCourseData_AddCourse_Course Course { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddCourseData_AddCourse_AddCoursePayload : IAddCourseData_AddCourse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddCourseData_AddCourse_Course
    {
        public global::System.String? Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddCourseData_AddCourse_Course_CourseDto : IAddCourseData_AddCourse_Course
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateCourseDataResult : global::System.IEquatable<UpdateCourseDataResult>, IUpdateCourseDataResult
    {
        public UpdateCourseDataResult(global::Catalogue.Client.IUpdateCourseData_UpdateCourse updateCourse)
        {
            UpdateCourse = updateCourse;
        }

        /// <summary>
        /// Course Update
        /// </summary>
        public global::Catalogue.Client.IUpdateCourseData_UpdateCourse UpdateCourse { get; }

        public virtual global::System.Boolean Equals(UpdateCourseDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (UpdateCourse.Equals(other.UpdateCourse));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCourseDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * UpdateCourse.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateCourseData_UpdateCourse_AddCoursePayload : global::System.IEquatable<UpdateCourseData_UpdateCourse_AddCoursePayload>, IUpdateCourseData_UpdateCourse_AddCoursePayload
    {
        public UpdateCourseData_UpdateCourse_AddCoursePayload(global::Catalogue.Client.IUpdateCourseData_UpdateCourse_Course course)
        {
            Course = course;
        }

        public global::Catalogue.Client.IUpdateCourseData_UpdateCourse_Course Course { get; }

        public virtual global::System.Boolean Equals(UpdateCourseData_UpdateCourse_AddCoursePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Course.Equals(other.Course));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCourseData_UpdateCourse_AddCoursePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Course.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateCourseData_UpdateCourse_Course_CourseDto : global::System.IEquatable<UpdateCourseData_UpdateCourse_Course_CourseDto>, IUpdateCourseData_UpdateCourse_Course_CourseDto
    {
        public UpdateCourseData_UpdateCourse_Course_CourseDto(global::System.String? title)
        {
            Title = title;
        }

        public global::System.String? Title { get; }

        public virtual global::System.Boolean Equals(UpdateCourseData_UpdateCourse_Course_CourseDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCourseData_UpdateCourse_Course_CourseDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateCourseDataResult
    {
        /// <summary>
        /// Course Update
        /// </summary>
        public global::Catalogue.Client.IUpdateCourseData_UpdateCourse UpdateCourse { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateCourseData_UpdateCourse
    {
        public global::Catalogue.Client.IUpdateCourseData_UpdateCourse_Course Course { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateCourseData_UpdateCourse_AddCoursePayload : IUpdateCourseData_UpdateCourse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateCourseData_UpdateCourse_Course
    {
        public global::System.String? Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateCourseData_UpdateCourse_Course_CourseDto : IUpdateCourseData_UpdateCourse_Course
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddSchoolDataResult : global::System.IEquatable<AddSchoolDataResult>, IAddSchoolDataResult
    {
        public AddSchoolDataResult(global::Catalogue.Client.IAddSchoolData_CreateSchool createSchool)
        {
            CreateSchool = createSchool;
        }

        /// <summary>
        /// Create the School.
        /// </summary>
        public global::Catalogue.Client.IAddSchoolData_CreateSchool CreateSchool { get; }

        public virtual global::System.Boolean Equals(AddSchoolDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CreateSchool.Equals(other.CreateSchool));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddSchoolDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CreateSchool.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddSchoolData_CreateSchool_AddEditSchoolPayload : global::System.IEquatable<AddSchoolData_CreateSchool_AddEditSchoolPayload>, IAddSchoolData_CreateSchool_AddEditSchoolPayload
    {
        public AddSchoolData_CreateSchool_AddEditSchoolPayload(global::Catalogue.Client.IAddSchoolData_CreateSchool_School school)
        {
            School = school;
        }

        public global::Catalogue.Client.IAddSchoolData_CreateSchool_School School { get; }

        public virtual global::System.Boolean Equals(AddSchoolData_CreateSchool_AddEditSchoolPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (School.Equals(other.School));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddSchoolData_CreateSchool_AddEditSchoolPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * School.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddSchoolData_CreateSchool_School_SchoolDto : global::System.IEquatable<AddSchoolData_CreateSchool_School_SchoolDto>, IAddSchoolData_CreateSchool_School_SchoolDto
    {
        public AddSchoolData_CreateSchool_School_SchoolDto(global::System.String? title)
        {
            Title = title;
        }

        public global::System.String? Title { get; }

        public virtual global::System.Boolean Equals(AddSchoolData_CreateSchool_School_SchoolDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddSchoolData_CreateSchool_School_SchoolDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddSchoolDataResult
    {
        /// <summary>
        /// Create the School.
        /// </summary>
        public global::Catalogue.Client.IAddSchoolData_CreateSchool CreateSchool { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddSchoolData_CreateSchool
    {
        public global::Catalogue.Client.IAddSchoolData_CreateSchool_School School { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddSchoolData_CreateSchool_AddEditSchoolPayload : IAddSchoolData_CreateSchool
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddSchoolData_CreateSchool_School
    {
        public global::System.String? Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddSchoolData_CreateSchool_School_SchoolDto : IAddSchoolData_CreateSchool_School
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateSchoolDataResult : global::System.IEquatable<UpdateSchoolDataResult>, IUpdateSchoolDataResult
    {
        public UpdateSchoolDataResult(global::Catalogue.Client.IUpdateSchoolData_UpdateSchool updateSchool)
        {
            UpdateSchool = updateSchool;
        }

        /// <summary>
        /// Update the School.
        /// </summary>
        public global::Catalogue.Client.IUpdateSchoolData_UpdateSchool UpdateSchool { get; }

        public virtual global::System.Boolean Equals(UpdateSchoolDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (UpdateSchool.Equals(other.UpdateSchool));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateSchoolDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * UpdateSchool.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateSchoolData_UpdateSchool_AddEditSchoolPayload : global::System.IEquatable<UpdateSchoolData_UpdateSchool_AddEditSchoolPayload>, IUpdateSchoolData_UpdateSchool_AddEditSchoolPayload
    {
        public UpdateSchoolData_UpdateSchool_AddEditSchoolPayload(global::Catalogue.Client.IUpdateSchoolData_UpdateSchool_School school)
        {
            School = school;
        }

        public global::Catalogue.Client.IUpdateSchoolData_UpdateSchool_School School { get; }

        public virtual global::System.Boolean Equals(UpdateSchoolData_UpdateSchool_AddEditSchoolPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (School.Equals(other.School));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateSchoolData_UpdateSchool_AddEditSchoolPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * School.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateSchoolData_UpdateSchool_School_SchoolDto : global::System.IEquatable<UpdateSchoolData_UpdateSchool_School_SchoolDto>, IUpdateSchoolData_UpdateSchool_School_SchoolDto
    {
        public UpdateSchoolData_UpdateSchool_School_SchoolDto(global::System.Int32? id, global::System.String? title, global::System.String? name)
        {
            Id = id;
            Title = title;
            Name = name;
        }

        public global::System.Int32? Id { get; }

        public global::System.String? Title { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(UpdateSchoolData_UpdateSchool_School_SchoolDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateSchoolData_UpdateSchool_School_SchoolDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateSchoolDataResult
    {
        /// <summary>
        /// Update the School.
        /// </summary>
        public global::Catalogue.Client.IUpdateSchoolData_UpdateSchool UpdateSchool { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateSchoolData_UpdateSchool
    {
        public global::Catalogue.Client.IUpdateSchoolData_UpdateSchool_School School { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateSchoolData_UpdateSchool_AddEditSchoolPayload : IUpdateSchoolData_UpdateSchool
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateSchoolData_UpdateSchool_School
    {
        public global::System.Int32? Id { get; }

        public global::System.String? Title { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateSchoolData_UpdateSchool_School_SchoolDto : IUpdateSchoolData_UpdateSchool_School
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetCourseListResult : global::System.IEquatable<GetCourseListResult>, IGetCourseListResult
    {
        public GetCourseListResult(global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetCourseList_CourseList> courseList)
        {
            CourseList = courseList;
        }

        /// <summary>
        /// Gets the list of Course.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetCourseList_CourseList> CourseList { get; }

        public virtual global::System.Boolean Equals(GetCourseListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(CourseList, other.CourseList));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourseListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var CourseList_elm in CourseList)
                {
                    hash ^= 397 * CourseList_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetCourseList_CourseList_Course : global::System.IEquatable<GetCourseList_CourseList_Course>, IGetCourseList_CourseList_Course
    {
        public GetCourseList_CourseList_Course(global::System.Int32 id, global::System.String code, global::System.String title, global::System.Double creditHours)
        {
            Id = id;
            Code = code;
            Title = title;
            CreditHours = creditHours;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Code { get; }

        public global::System.String Title { get; }

        public global::System.Double CreditHours { get; }

        public virtual global::System.Boolean Equals(GetCourseList_CourseList_Course? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Code.Equals(other.Code) && Title.Equals(other.Title) && CreditHours == other.CreditHours;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourseList_CourseList_Course)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * CreditHours.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IGetCourseListResult
    {
        /// <summary>
        /// Gets the list of Course.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetCourseList_CourseList> CourseList { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IGetCourseList_CourseList
    {
        public global::System.Int32 Id { get; }

        public global::System.String Code { get; }

        public global::System.String Title { get; }

        public global::System.Double CreditHours { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IGetCourseList_CourseList_Course : IGetCourseList_CourseList
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetSchoolListResult : global::System.IEquatable<GetSchoolListResult>, IGetSchoolListResult
    {
        public GetSchoolListResult(global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetSchoolList_AllSchools> allSchools)
        {
            AllSchools = allSchools;
        }

        /// <summary>
        /// Gets the list of School.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetSchoolList_AllSchools> AllSchools { get; }

        public virtual global::System.Boolean Equals(GetSchoolListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AllSchools, other.AllSchools));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSchoolListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var AllSchools_elm in AllSchools)
                {
                    hash ^= 397 * AllSchools_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetSchoolList_AllSchools_School : global::System.IEquatable<GetSchoolList_AllSchools_School>, IGetSchoolList_AllSchools_School
    {
        public GetSchoolList_AllSchools_School(global::System.Int32 id, global::System.String title, global::System.String name)
        {
            Id = id;
            Title = title;
            Name = name;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetSchoolList_AllSchools_School? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Title.Equals(other.Title) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSchoolList_AllSchools_School)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IGetSchoolListResult
    {
        /// <summary>
        /// Gets the list of School.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetSchoolList_AllSchools> AllSchools { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IGetSchoolList_AllSchools
    {
        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IGetSchoolList_AllSchools_School : IGetSchoolList_AllSchools
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class CourseDtoInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter = default !;
        public global::System.String TypeName => "CourseDtoInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Catalogue.Client.CourseDtoInput;
            var inputInfo = runtimeValue as global::Catalogue.Client.State.ICourseDtoInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("code", FormatCode(input.Code)));
            }

            if (inputInfo.IsTitleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("title", FormatTitle(input.Title)));
            }

            if (inputInfo.IsCreditHoursSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("creditHours", FormatCreditHours(input.CreditHours)));
            }

            if (inputInfo.IsSchoolIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("schoolId", FormatSchoolId(input.SchoolId)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCode(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTitle(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreditHours(global::System.Double input)
        {
            return _floatFormatter.Format(input);
        }

        private global::System.Object? FormatSchoolId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class CourseDtoInput : global::Catalogue.Client.State.ICourseDtoInputInfo, global::System.IEquatable<CourseDtoInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseDtoInput)obj);
        }

        public virtual global::System.Boolean Equals(CourseDtoInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Code is null && other.Code is null) || Code != null && Code.Equals(other.Code)) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && CreditHours == other.CreditHours && SchoolId == other.SchoolId;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Code != null)
                {
                    hash ^= 397 * Code.GetHashCode();
                }

                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                hash ^= 397 * CreditHours.GetHashCode();
                hash ^= 397 * SchoolId.GetHashCode();
                return hash;
            }
        }

        private global::System.Int32? _value_id;
        private global::System.Boolean _set_id;
        private global::System.String? _value_code;
        private global::System.Boolean _set_code;
        private global::System.String? _value_title;
        private global::System.Boolean _set_title;
        private global::System.Double _value_creditHours;
        private global::System.Boolean _set_creditHours;
        private global::System.Int32 _value_schoolId;
        private global::System.Boolean _set_schoolId;
        public global::System.Int32? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Catalogue.Client.State.ICourseDtoInputInfo.IsIdSet => _set_id;
        public global::System.String? Code
        {
            get => _value_code;
            set
            {
                _set_code = true;
                _value_code = value;
            }
        }

        global::System.Boolean global::Catalogue.Client.State.ICourseDtoInputInfo.IsCodeSet => _set_code;
        public global::System.String? Title
        {
            get => _value_title;
            set
            {
                _set_title = true;
                _value_title = value;
            }
        }

        global::System.Boolean global::Catalogue.Client.State.ICourseDtoInputInfo.IsTitleSet => _set_title;
        public global::System.Double CreditHours
        {
            get => _value_creditHours;
            set
            {
                _set_creditHours = true;
                _value_creditHours = value;
            }
        }

        global::System.Boolean global::Catalogue.Client.State.ICourseDtoInputInfo.IsCreditHoursSet => _set_creditHours;
        public global::System.Int32 SchoolId
        {
            get => _value_schoolId;
            set
            {
                _set_schoolId = true;
                _value_schoolId = value;
            }
        }

        global::System.Boolean global::Catalogue.Client.State.ICourseDtoInputInfo.IsSchoolIdSet => _set_schoolId;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class SchoolDtoInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "SchoolDtoInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Catalogue.Client.SchoolDtoInput;
            var inputInfo = runtimeValue as global::Catalogue.Client.State.ISchoolDtoInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsTitleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("title", FormatTitle(input.Title)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTitle(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class SchoolDtoInput : global::Catalogue.Client.State.ISchoolDtoInputInfo, global::System.IEquatable<SchoolDtoInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SchoolDtoInput)obj);
        }

        public virtual global::System.Boolean Equals(SchoolDtoInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32? _value_id;
        private global::System.Boolean _set_id;
        private global::System.String? _value_title;
        private global::System.Boolean _set_title;
        private global::System.String? _value_name;
        private global::System.Boolean _set_name;
        public global::System.Int32? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Catalogue.Client.State.ISchoolDtoInputInfo.IsIdSet => _set_id;
        public global::System.String? Title
        {
            get => _value_title;
            set
            {
                _set_title = true;
                _value_title = value;
            }
        }

        global::System.Boolean global::Catalogue.Client.State.ISchoolDtoInputInfo.IsTitleSet => _set_title;
        public global::System.String? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::Catalogue.Client.State.ISchoolDtoInputInfo.IsNameSet => _set_name;
    }

    /// <summary>
    /// Represents the operation service of the AddCourseData GraphQL operation
    /// <code>
    /// mutation AddCourseData($courseData: CourseDtoInput!) {
    ///   addCourse(course: $courseData) {
    ///     __typename
    ///     course {
    ///       __typename
    ///       title
    ///       ... on CourseDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddCourseDataMutationDocument : global::StrawberryShake.IDocument
    {
        private AddCourseDataMutationDocument()
        {
        }

        public static AddCourseDataMutationDocument Instance { get; } = new AddCourseDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8a5d4961b7b5e0aca179bed3be63a9de");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddCourseData GraphQL operation
    /// <code>
    /// mutation AddCourseData($courseData: CourseDtoInput!) {
    ///   addCourse(course: $courseData) {
    ///     __typename
    ///     course {
    ///       __typename
    ///       title
    ///       ... on CourseDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddCourseDataMutation : global::Catalogue.Client.IAddCourseDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddCourseDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _courseDtoInputFormatter;
        public AddCourseDataMutation(global::StrawberryShake.IOperationExecutor<IAddCourseDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _courseDtoInputFormatter = serializerResolver.GetInputValueFormatter("CourseDtoInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddCourseDataResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddCourseDataResult>> ExecuteAsync(global::Catalogue.Client.CourseDtoInput courseData, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(courseData);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddCourseDataResult>> Watch(global::Catalogue.Client.CourseDtoInput courseData, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(courseData);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Catalogue.Client.CourseDtoInput courseData)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("courseData", FormatCourseData(courseData));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddCourseDataMutationDocument.Instance.Hash.Value, name: "AddCourseData", document: AddCourseDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCourseData(global::Catalogue.Client.CourseDtoInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _courseDtoInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddCourseData GraphQL operation
    /// <code>
    /// mutation AddCourseData($courseData: CourseDtoInput!) {
    ///   addCourse(course: $courseData) {
    ///     __typename
    ///     course {
    ///       __typename
    ///       title
    ///       ... on CourseDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddCourseDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddCourseDataResult>> ExecuteAsync(global::Catalogue.Client.CourseDtoInput courseData, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddCourseDataResult>> Watch(global::Catalogue.Client.CourseDtoInput courseData, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateCourseData GraphQL operation
    /// <code>
    /// mutation UpdateCourseData($scourseData: CourseDtoInput!) {
    ///   updateCourse(course: $scourseData) {
    ///     __typename
    ///     course {
    ///       __typename
    ///       title
    ///       ... on CourseDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateCourseDataMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateCourseDataMutationDocument()
        {
        }

        public static UpdateCourseDataMutationDocument Instance { get; } = new UpdateCourseDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x20, 0x24, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d7226ec7041e3ea1e7f065882910bc32");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateCourseData GraphQL operation
    /// <code>
    /// mutation UpdateCourseData($scourseData: CourseDtoInput!) {
    ///   updateCourse(course: $scourseData) {
    ///     __typename
    ///     course {
    ///       __typename
    ///       title
    ///       ... on CourseDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateCourseDataMutation : global::Catalogue.Client.IUpdateCourseDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateCourseDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _courseDtoInputFormatter;
        public UpdateCourseDataMutation(global::StrawberryShake.IOperationExecutor<IUpdateCourseDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _courseDtoInputFormatter = serializerResolver.GetInputValueFormatter("CourseDtoInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateCourseDataResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCourseDataResult>> ExecuteAsync(global::Catalogue.Client.CourseDtoInput scourseData, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(scourseData);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCourseDataResult>> Watch(global::Catalogue.Client.CourseDtoInput scourseData, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(scourseData);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Catalogue.Client.CourseDtoInput scourseData)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("scourseData", FormatScourseData(scourseData));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateCourseDataMutationDocument.Instance.Hash.Value, name: "UpdateCourseData", document: UpdateCourseDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatScourseData(global::Catalogue.Client.CourseDtoInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _courseDtoInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateCourseData GraphQL operation
    /// <code>
    /// mutation UpdateCourseData($scourseData: CourseDtoInput!) {
    ///   updateCourse(course: $scourseData) {
    ///     __typename
    ///     course {
    ///       __typename
    ///       title
    ///       ... on CourseDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateCourseDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCourseDataResult>> ExecuteAsync(global::Catalogue.Client.CourseDtoInput scourseData, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCourseDataResult>> Watch(global::Catalogue.Client.CourseDtoInput scourseData, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddSchoolData GraphQL operation
    /// <code>
    /// mutation AddSchoolData($schoolData: SchoolDtoInput!) {
    ///   createSchool(school: $schoolData) {
    ///     __typename
    ///     school {
    ///       __typename
    ///       title
    ///       ... on SchoolDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddSchoolDataMutationDocument : global::StrawberryShake.IDocument
    {
        private AddSchoolDataMutationDocument()
        {
        }

        public static AddSchoolDataMutationDocument Instance { get; } = new AddSchoolDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x74, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x28, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x3a, 0x20, 0x24, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x74, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "2b7b52877e5da44735b761782bead799");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddSchoolData GraphQL operation
    /// <code>
    /// mutation AddSchoolData($schoolData: SchoolDtoInput!) {
    ///   createSchool(school: $schoolData) {
    ///     __typename
    ///     school {
    ///       __typename
    ///       title
    ///       ... on SchoolDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddSchoolDataMutation : global::Catalogue.Client.IAddSchoolDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddSchoolDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _schoolDtoInputFormatter;
        public AddSchoolDataMutation(global::StrawberryShake.IOperationExecutor<IAddSchoolDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _schoolDtoInputFormatter = serializerResolver.GetInputValueFormatter("SchoolDtoInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddSchoolDataResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddSchoolDataResult>> ExecuteAsync(global::Catalogue.Client.SchoolDtoInput schoolData, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(schoolData);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddSchoolDataResult>> Watch(global::Catalogue.Client.SchoolDtoInput schoolData, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(schoolData);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Catalogue.Client.SchoolDtoInput schoolData)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("schoolData", FormatSchoolData(schoolData));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddSchoolDataMutationDocument.Instance.Hash.Value, name: "AddSchoolData", document: AddSchoolDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSchoolData(global::Catalogue.Client.SchoolDtoInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _schoolDtoInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddSchoolData GraphQL operation
    /// <code>
    /// mutation AddSchoolData($schoolData: SchoolDtoInput!) {
    ///   createSchool(school: $schoolData) {
    ///     __typename
    ///     school {
    ///       __typename
    ///       title
    ///       ... on SchoolDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IAddSchoolDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddSchoolDataResult>> ExecuteAsync(global::Catalogue.Client.SchoolDtoInput schoolData, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddSchoolDataResult>> Watch(global::Catalogue.Client.SchoolDtoInput schoolData, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateSchoolData GraphQL operation
    /// <code>
    /// mutation UpdateSchoolData($schoolData: SchoolDtoInput!) {
    ///   updateSchool(school: $schoolData) {
    ///     __typename
    ///     school {
    ///       __typename
    ///       id
    ///       title
    ///       name
    ///       ... on SchoolDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateSchoolDataMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateSchoolDataMutationDocument()
        {
        }

        public static UpdateSchoolDataMutationDocument Instance { get; } = new UpdateSchoolDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x74, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x28, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x3a, 0x20, 0x24, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x74, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "f6759692e8ce7aab5bedd85022f4543b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateSchoolData GraphQL operation
    /// <code>
    /// mutation UpdateSchoolData($schoolData: SchoolDtoInput!) {
    ///   updateSchool(school: $schoolData) {
    ///     __typename
    ///     school {
    ///       __typename
    ///       id
    ///       title
    ///       name
    ///       ... on SchoolDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateSchoolDataMutation : global::Catalogue.Client.IUpdateSchoolDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateSchoolDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _schoolDtoInputFormatter;
        public UpdateSchoolDataMutation(global::StrawberryShake.IOperationExecutor<IUpdateSchoolDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _schoolDtoInputFormatter = serializerResolver.GetInputValueFormatter("SchoolDtoInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateSchoolDataResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateSchoolDataResult>> ExecuteAsync(global::Catalogue.Client.SchoolDtoInput schoolData, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(schoolData);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateSchoolDataResult>> Watch(global::Catalogue.Client.SchoolDtoInput schoolData, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(schoolData);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Catalogue.Client.SchoolDtoInput schoolData)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("schoolData", FormatSchoolData(schoolData));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateSchoolDataMutationDocument.Instance.Hash.Value, name: "UpdateSchoolData", document: UpdateSchoolDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSchoolData(global::Catalogue.Client.SchoolDtoInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _schoolDtoInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateSchoolData GraphQL operation
    /// <code>
    /// mutation UpdateSchoolData($schoolData: SchoolDtoInput!) {
    ///   updateSchool(school: $schoolData) {
    ///     __typename
    ///     school {
    ///       __typename
    ///       id
    ///       title
    ///       name
    ///       ... on SchoolDto {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IUpdateSchoolDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateSchoolDataResult>> ExecuteAsync(global::Catalogue.Client.SchoolDtoInput schoolData, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateSchoolDataResult>> Watch(global::Catalogue.Client.SchoolDtoInput schoolData, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetCourseList GraphQL operation
    /// <code>
    /// query GetCourseList {
    ///   courseList {
    ///     __typename
    ///     id
    ///     code
    ///     title
    ///     creditHours
    ///     ... on Course {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetCourseListQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCourseListQueryDocument()
        {
        }

        public static GetCourseListQueryDocument Instance { get; } = new GetCourseListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7e1540dd5a05e3fcbb266a14b565dd81");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourseList GraphQL operation
    /// <code>
    /// query GetCourseList {
    ///   courseList {
    ///     __typename
    ///     id
    ///     code
    ///     title
    ///     creditHours
    ///     ... on Course {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetCourseListQuery : global::Catalogue.Client.IGetCourseListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCourseListResult> _operationExecutor;
        public GetCourseListQuery(global::StrawberryShake.IOperationExecutor<IGetCourseListResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCourseListResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCourseListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCourseListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCourseListQueryDocument.Instance.Hash.Value, name: "GetCourseList", document: GetCourseListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourseList GraphQL operation
    /// <code>
    /// query GetCourseList {
    ///   courseList {
    ///     __typename
    ///     id
    ///     code
    ///     title
    ///     creditHours
    ///     ... on Course {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IGetCourseListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCourseListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCourseListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetSchoolList GraphQL operation
    /// <code>
    /// query GetSchoolList {
    ///   allSchools {
    ///     __typename
    ///     id
    ///     title
    ///     name
    ///     ... on School {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetSchoolListQueryDocument : global::StrawberryShake.IDocument
    {
        private GetSchoolListQueryDocument()
        {
        }

        public static GetSchoolListQueryDocument Instance { get; } = new GetSchoolListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "583b9913664d8f7cc768e4c05c4568b9");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSchoolList GraphQL operation
    /// <code>
    /// query GetSchoolList {
    ///   allSchools {
    ///     __typename
    ///     id
    ///     title
    ///     name
    ///     ... on School {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetSchoolListQuery : global::Catalogue.Client.IGetSchoolListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSchoolListResult> _operationExecutor;
        public GetSchoolListQuery(global::StrawberryShake.IOperationExecutor<IGetSchoolListResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSchoolListResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSchoolListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSchoolListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetSchoolListQueryDocument.Instance.Hash.Value, name: "GetSchoolList", document: GetSchoolListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSchoolList GraphQL operation
    /// <code>
    /// query GetSchoolList {
    ///   allSchools {
    ///     __typename
    ///     id
    ///     title
    ///     name
    ///     ... on School {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface IGetSchoolListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSchoolListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSchoolListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the CatalogueClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class CatalogueClient : global::Catalogue.Client.ICatalogueClient
    {
        private readonly global::Catalogue.Client.IAddCourseDataMutation _addCourseData;
        private readonly global::Catalogue.Client.IUpdateCourseDataMutation _updateCourseData;
        private readonly global::Catalogue.Client.IAddSchoolDataMutation _addSchoolData;
        private readonly global::Catalogue.Client.IUpdateSchoolDataMutation _updateSchoolData;
        private readonly global::Catalogue.Client.IGetCourseListQuery _getCourseList;
        private readonly global::Catalogue.Client.IGetSchoolListQuery _getSchoolList;
        public CatalogueClient(global::Catalogue.Client.IAddCourseDataMutation addCourseData, global::Catalogue.Client.IUpdateCourseDataMutation updateCourseData, global::Catalogue.Client.IAddSchoolDataMutation addSchoolData, global::Catalogue.Client.IUpdateSchoolDataMutation updateSchoolData, global::Catalogue.Client.IGetCourseListQuery getCourseList, global::Catalogue.Client.IGetSchoolListQuery getSchoolList)
        {
            _addCourseData = addCourseData ?? throw new global::System.ArgumentNullException(nameof(addCourseData));
            _updateCourseData = updateCourseData ?? throw new global::System.ArgumentNullException(nameof(updateCourseData));
            _addSchoolData = addSchoolData ?? throw new global::System.ArgumentNullException(nameof(addSchoolData));
            _updateSchoolData = updateSchoolData ?? throw new global::System.ArgumentNullException(nameof(updateSchoolData));
            _getCourseList = getCourseList ?? throw new global::System.ArgumentNullException(nameof(getCourseList));
            _getSchoolList = getSchoolList ?? throw new global::System.ArgumentNullException(nameof(getSchoolList));
        }

        public static global::System.String ClientName => "CatalogueClient";
        public global::Catalogue.Client.IAddCourseDataMutation AddCourseData => _addCourseData;
        public global::Catalogue.Client.IUpdateCourseDataMutation UpdateCourseData => _updateCourseData;
        public global::Catalogue.Client.IAddSchoolDataMutation AddSchoolData => _addSchoolData;
        public global::Catalogue.Client.IUpdateSchoolDataMutation UpdateSchoolData => _updateSchoolData;
        public global::Catalogue.Client.IGetCourseListQuery GetCourseList => _getCourseList;
        public global::Catalogue.Client.IGetSchoolListQuery GetSchoolList => _getSchoolList;
    }

    /// <summary>
    /// Represents the CatalogueClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial interface ICatalogueClient
    {
        global::Catalogue.Client.IAddCourseDataMutation AddCourseData { get; }

        global::Catalogue.Client.IUpdateCourseDataMutation UpdateCourseData { get; }

        global::Catalogue.Client.IAddSchoolDataMutation AddSchoolData { get; }

        global::Catalogue.Client.IUpdateSchoolDataMutation UpdateSchoolData { get; }

        global::Catalogue.Client.IGetCourseListQuery GetCourseList { get; }

        global::Catalogue.Client.IGetSchoolListQuery GetSchoolList { get; }
    }
}

namespace Catalogue.Client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class CourseDtoEntity
    {
        public CourseDtoEntity(global::System.String? title = default !)
        {
            Title = title;
        }

        public global::System.String? Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class SchoolDtoEntity
    {
        public SchoolDtoEntity(global::System.String? title = default !, global::System.Int32? id = default !, global::System.String? name = default !)
        {
            Title = title;
            Id = id;
            Name = name;
        }

        public global::System.String? Title { get; }

        public global::System.Int32? Id { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class CourseEntity
    {
        public CourseEntity(global::System.Int32 id = default !, global::System.String code = default !, global::System.String title = default !, global::System.Double creditHours = default !)
        {
            Id = id;
            Code = code;
            Title = title;
            CreditHours = creditHours;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Code { get; }

        public global::System.String Title { get; }

        public global::System.Double CreditHours { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class SchoolEntity
    {
        public SchoolEntity(global::System.Int32 id = default !, global::System.String title = default !, global::System.String name = default !)
        {
            Id = id;
            Title = title;
            Name = name;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddCourseDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.AddCourseDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, AddCourseData_AddCourse_Course_CourseDto> _addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper;
        public AddCourseDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, AddCourseData_AddCourse_Course_CourseDto> addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper = addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IAddCourseDataResult);
        public AddCourseDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddCourseDataResultInfo info)
            {
                return new AddCourseDataResult(MapNonNullableIAddCourseData_AddCourse(info.AddCourse, snapshot));
            }

            throw new global::System.ArgumentException("AddCourseDataResultInfo expected.");
        }

        private global::Catalogue.Client.IAddCourseData_AddCourse MapNonNullableIAddCourseData_AddCourse(global::Catalogue.Client.State.AddCoursePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddCourseData_AddCourse returnValue = default !;
            if (data.__typename.Equals("AddCoursePayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddCourseData_AddCourse_AddCoursePayload(MapNonNullableIAddCourseData_AddCourse_Course(data.Course ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Catalogue.Client.IAddCourseData_AddCourse_Course MapNonNullableIAddCourseData_AddCourse_Course(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("CourseDto", global::System.StringComparison.Ordinal))
            {
                return _addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.CourseDtoEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddCourseDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddCourseDataResultInfo(global::Catalogue.Client.State.AddCoursePayloadData addCourse, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddCourse = addCourse;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Add a new course data.
        /// </summary>
        public global::Catalogue.Client.State.AddCoursePayloadData AddCourse { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddCourseDataResultInfo(AddCourse, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, AddCourseData_AddCourse_Course_CourseDto>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddCourseData_AddCourse_Course_CourseDto Map(global::Catalogue.Client.State.CourseDtoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddCourseData_AddCourse_Course_CourseDto(entity.Title);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateCourseDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.UpdateCourseDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, UpdateCourseData_UpdateCourse_Course_CourseDto> _updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper;
        public UpdateCourseDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, UpdateCourseData_UpdateCourse_Course_CourseDto> updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper = updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IUpdateCourseDataResult);
        public UpdateCourseDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateCourseDataResultInfo info)
            {
                return new UpdateCourseDataResult(MapNonNullableIUpdateCourseData_UpdateCourse(info.UpdateCourse, snapshot));
            }

            throw new global::System.ArgumentException("UpdateCourseDataResultInfo expected.");
        }

        private global::Catalogue.Client.IUpdateCourseData_UpdateCourse MapNonNullableIUpdateCourseData_UpdateCourse(global::Catalogue.Client.State.AddCoursePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IUpdateCourseData_UpdateCourse returnValue = default !;
            if (data.__typename.Equals("AddCoursePayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new UpdateCourseData_UpdateCourse_AddCoursePayload(MapNonNullableIUpdateCourseData_UpdateCourse_Course(data.Course ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Catalogue.Client.IUpdateCourseData_UpdateCourse_Course MapNonNullableIUpdateCourseData_UpdateCourse_Course(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("CourseDto", global::System.StringComparison.Ordinal))
            {
                return _updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.CourseDtoEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateCourseDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateCourseDataResultInfo(global::Catalogue.Client.State.AddCoursePayloadData updateCourse, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpdateCourse = updateCourse;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Course Update
        /// </summary>
        public global::Catalogue.Client.State.AddCoursePayloadData UpdateCourse { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateCourseDataResultInfo(UpdateCourse, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, UpdateCourseData_UpdateCourse_Course_CourseDto>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public UpdateCourseData_UpdateCourse_Course_CourseDto Map(global::Catalogue.Client.State.CourseDtoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new UpdateCourseData_UpdateCourse_Course_CourseDto(entity.Title);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddSchoolDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.AddSchoolDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, AddSchoolData_CreateSchool_School_SchoolDto> _addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper;
        public AddSchoolDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, AddSchoolData_CreateSchool_School_SchoolDto> addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper = addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IAddSchoolDataResult);
        public AddSchoolDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddSchoolDataResultInfo info)
            {
                return new AddSchoolDataResult(MapNonNullableIAddSchoolData_CreateSchool(info.CreateSchool, snapshot));
            }

            throw new global::System.ArgumentException("AddSchoolDataResultInfo expected.");
        }

        private global::Catalogue.Client.IAddSchoolData_CreateSchool MapNonNullableIAddSchoolData_CreateSchool(global::Catalogue.Client.State.AddEditSchoolPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddSchoolData_CreateSchool returnValue = default !;
            if (data.__typename.Equals("AddEditSchoolPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddSchoolData_CreateSchool_AddEditSchoolPayload(MapNonNullableIAddSchoolData_CreateSchool_School(data.School ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Catalogue.Client.IAddSchoolData_CreateSchool_School MapNonNullableIAddSchoolData_CreateSchool_School(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("SchoolDto", global::System.StringComparison.Ordinal))
            {
                return _addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.SchoolDtoEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddSchoolDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddSchoolDataResultInfo(global::Catalogue.Client.State.AddEditSchoolPayloadData createSchool, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateSchool = createSchool;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Create the School.
        /// </summary>
        public global::Catalogue.Client.State.AddEditSchoolPayloadData CreateSchool { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddSchoolDataResultInfo(CreateSchool, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, AddSchoolData_CreateSchool_School_SchoolDto>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddSchoolData_CreateSchool_School_SchoolDto Map(global::Catalogue.Client.State.SchoolDtoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddSchoolData_CreateSchool_School_SchoolDto(entity.Title);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateSchoolDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.UpdateSchoolDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, UpdateSchoolData_UpdateSchool_School_SchoolDto> _updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper;
        public UpdateSchoolDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, UpdateSchoolData_UpdateSchool_School_SchoolDto> updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper = updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IUpdateSchoolDataResult);
        public UpdateSchoolDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateSchoolDataResultInfo info)
            {
                return new UpdateSchoolDataResult(MapNonNullableIUpdateSchoolData_UpdateSchool(info.UpdateSchool, snapshot));
            }

            throw new global::System.ArgumentException("UpdateSchoolDataResultInfo expected.");
        }

        private global::Catalogue.Client.IUpdateSchoolData_UpdateSchool MapNonNullableIUpdateSchoolData_UpdateSchool(global::Catalogue.Client.State.AddEditSchoolPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IUpdateSchoolData_UpdateSchool returnValue = default !;
            if (data.__typename.Equals("AddEditSchoolPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new UpdateSchoolData_UpdateSchool_AddEditSchoolPayload(MapNonNullableIUpdateSchoolData_UpdateSchool_School(data.School ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Catalogue.Client.IUpdateSchoolData_UpdateSchool_School MapNonNullableIUpdateSchoolData_UpdateSchool_School(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("SchoolDto", global::System.StringComparison.Ordinal))
            {
                return _updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.SchoolDtoEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateSchoolDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateSchoolDataResultInfo(global::Catalogue.Client.State.AddEditSchoolPayloadData updateSchool, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpdateSchool = updateSchool;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Update the School.
        /// </summary>
        public global::Catalogue.Client.State.AddEditSchoolPayloadData UpdateSchool { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateSchoolDataResultInfo(UpdateSchool, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, UpdateSchoolData_UpdateSchool_School_SchoolDto>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public UpdateSchoolData_UpdateSchool_School_SchoolDto Map(global::Catalogue.Client.State.SchoolDtoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new UpdateSchoolData_UpdateSchool_School_SchoolDto(entity.Id, entity.Title, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetCourseListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.GetCourseListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseEntity, GetCourseList_CourseList_Course> _getCourseList_CourseList_CourseFromCourseEntityMapper;
        public GetCourseListResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseEntity, GetCourseList_CourseList_Course> getCourseList_CourseList_CourseFromCourseEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getCourseList_CourseList_CourseFromCourseEntityMapper = getCourseList_CourseList_CourseFromCourseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCourseList_CourseList_CourseFromCourseEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IGetCourseListResult);
        public GetCourseListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCourseListResultInfo info)
            {
                return new GetCourseListResult(MapNonNullableIGetCourseList_CourseListNonNullableArray(info.CourseList, snapshot));
            }

            throw new global::System.ArgumentException("GetCourseListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetCourseList_CourseList> MapNonNullableIGetCourseList_CourseListNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var courses = new global::System.Collections.Generic.List<global::Catalogue.Client.IGetCourseList_CourseList>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                courses.Add(MapNonNullableIGetCourseList_CourseList(child, snapshot));
            }

            return courses;
        }

        private global::Catalogue.Client.IGetCourseList_CourseList MapNonNullableIGetCourseList_CourseList(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Course", global::System.StringComparison.Ordinal))
            {
                return _getCourseList_CourseList_CourseFromCourseEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.CourseEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetCourseListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCourseListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> courseList, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CourseList = courseList;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Gets the list of Course.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> CourseList { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCourseListResultInfo(CourseList, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetCourseList_CourseList_CourseFromCourseEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseEntity, GetCourseList_CourseList_Course>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCourseList_CourseList_CourseFromCourseEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetCourseList_CourseList_Course Map(global::Catalogue.Client.State.CourseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetCourseList_CourseList_Course(entity.Id, entity.Code, entity.Title, entity.CreditHours);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetSchoolListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.GetSchoolListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolEntity, GetSchoolList_AllSchools_School> _getSchoolList_AllSchools_SchoolFromSchoolEntityMapper;
        public GetSchoolListResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolEntity, GetSchoolList_AllSchools_School> getSchoolList_AllSchools_SchoolFromSchoolEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSchoolList_AllSchools_SchoolFromSchoolEntityMapper = getSchoolList_AllSchools_SchoolFromSchoolEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSchoolList_AllSchools_SchoolFromSchoolEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IGetSchoolListResult);
        public GetSchoolListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSchoolListResultInfo info)
            {
                return new GetSchoolListResult(MapNonNullableIGetSchoolList_AllSchoolsNonNullableArray(info.AllSchools, snapshot));
            }

            throw new global::System.ArgumentException("GetSchoolListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetSchoolList_AllSchools> MapNonNullableIGetSchoolList_AllSchoolsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var schools = new global::System.Collections.Generic.List<global::Catalogue.Client.IGetSchoolList_AllSchools>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                schools.Add(MapNonNullableIGetSchoolList_AllSchools(child, snapshot));
            }

            return schools;
        }

        private global::Catalogue.Client.IGetSchoolList_AllSchools MapNonNullableIGetSchoolList_AllSchools(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("School", global::System.StringComparison.Ordinal))
            {
                return _getSchoolList_AllSchools_SchoolFromSchoolEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.SchoolEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetSchoolListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetSchoolListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> allSchools, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllSchools = allSchools;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Gets the list of School.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> AllSchools { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSchoolListResultInfo(AllSchools, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetSchoolList_AllSchools_SchoolFromSchoolEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolEntity, GetSchoolList_AllSchools_School>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSchoolList_AllSchools_SchoolFromSchoolEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSchoolList_AllSchools_School Map(global::Catalogue.Client.State.SchoolEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSchoolList_AllSchools_School(entity.Id, entity.Title, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    internal interface ICourseDtoInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsCodeSet { get; }

        global::System.Boolean IsTitleSet { get; }

        global::System.Boolean IsCreditHoursSet { get; }

        global::System.Boolean IsSchoolIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    internal interface ISchoolDtoInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsTitleSet { get; }

        global::System.Boolean IsNameSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddCourseDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddCourseDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddCourseDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public AddCourseDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddCourseDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddCourseDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddCourseDataResult Result, AddCourseDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddCourseDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddCourseDataResult, AddCourseDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Catalogue.Client.State.AddCoursePayloadData addCourseId = default !;
            _entityStore.Update(session =>
            {
                addCourseId = DeserializeNonNullableIAddCourseData_AddCourse(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addCourse"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddCourseDataResultInfo(addCourseId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Catalogue.Client.State.AddCoursePayloadData DeserializeNonNullableIAddCourseData_AddCourse(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddCoursePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Catalogue.Client.State.AddCoursePayloadData(typename, course: UpdateNonNullableIAddCourseData_AddCourse_CourseEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "course"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIAddCourseData_AddCourse_CourseEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CourseDto", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.CourseDtoEntity? entity))
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateCourseDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateCourseDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateCourseDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public UpdateCourseDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateCourseDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpdateCourseDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpdateCourseDataResult Result, UpdateCourseDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IUpdateCourseDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpdateCourseDataResult, UpdateCourseDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Catalogue.Client.State.AddCoursePayloadData updateCourseId = default !;
            _entityStore.Update(session =>
            {
                updateCourseId = DeserializeNonNullableIUpdateCourseData_UpdateCourse(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updateCourse"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpdateCourseDataResultInfo(updateCourseId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Catalogue.Client.State.AddCoursePayloadData DeserializeNonNullableIUpdateCourseData_UpdateCourse(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddCoursePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Catalogue.Client.State.AddCoursePayloadData(typename, course: UpdateNonNullableIUpdateCourseData_UpdateCourse_CourseEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "course"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIUpdateCourseData_UpdateCourse_CourseEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CourseDto", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.CourseDtoEntity? entity))
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddSchoolDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddSchoolDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddSchoolDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public AddSchoolDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddSchoolDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddSchoolDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddSchoolDataResult Result, AddSchoolDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddSchoolDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddSchoolDataResult, AddSchoolDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Catalogue.Client.State.AddEditSchoolPayloadData createSchoolId = default !;
            _entityStore.Update(session =>
            {
                createSchoolId = DeserializeNonNullableIAddSchoolData_CreateSchool(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createSchool"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddSchoolDataResultInfo(createSchoolId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Catalogue.Client.State.AddEditSchoolPayloadData DeserializeNonNullableIAddSchoolData_CreateSchool(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddEditSchoolPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Catalogue.Client.State.AddEditSchoolPayloadData(typename, school: UpdateNonNullableIAddSchoolData_CreateSchool_SchoolEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "school"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIAddSchoolData_CreateSchool_SchoolEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SchoolDto", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.SchoolDtoEntity? entity))
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), entity.Id, entity.Name));
                }
                else
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class UpdateSchoolDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateSchoolDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateSchoolDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public UpdateSchoolDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateSchoolDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpdateSchoolDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpdateSchoolDataResult Result, UpdateSchoolDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IUpdateSchoolDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpdateSchoolDataResult, UpdateSchoolDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Catalogue.Client.State.AddEditSchoolPayloadData updateSchoolId = default !;
            _entityStore.Update(session =>
            {
                updateSchoolId = DeserializeNonNullableIUpdateSchoolData_UpdateSchool(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updateSchool"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpdateSchoolDataResultInfo(updateSchoolId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Catalogue.Client.State.AddEditSchoolPayloadData DeserializeNonNullableIUpdateSchoolData_UpdateSchool(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddEditSchoolPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Catalogue.Client.State.AddEditSchoolPayloadData(typename, school: UpdateNonNullableIUpdateSchoolData_UpdateSchool_SchoolEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "school"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIUpdateSchoolData_UpdateSchool_SchoolEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SchoolDto", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.SchoolDtoEntity? entity))
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetCourseListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetCourseListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetCourseListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetCourseListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetCourseListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCourseListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCourseListResult Result, GetCourseListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCourseListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCourseListResult, GetCourseListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> courseListId = default !;
            _entityStore.Update(session =>
            {
                courseListId = UpdateNonNullableIGetCourseList_CourseListEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseList"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCourseListResultInfo(courseListId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetCourseList_CourseListEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var courses = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                courses.Add(UpdateNonNullableIGetCourseList_CourseListEntity(session, child, entityIds));
            }

            return courses;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetCourseList_CourseListEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Course", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.CourseEntity? entity))
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creditHours"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creditHours"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class GetSchoolListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetSchoolListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetSchoolListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetSchoolListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetSchoolListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetSchoolListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetSchoolListResult Result, GetSchoolListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetSchoolListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetSchoolListResult, GetSchoolListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> allSchoolsId = default !;
            _entityStore.Update(session =>
            {
                allSchoolsId = UpdateNonNullableIGetSchoolList_AllSchoolsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allSchools"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetSchoolListResultInfo(allSchoolsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetSchoolList_AllSchoolsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var schools = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                schools.Add(UpdateNonNullableIGetSchoolList_AllSchoolsEntity(session, child, entityIds));
            }

            return schools;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetSchoolList_AllSchoolsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("School", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.SchoolEntity? entity))
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddCoursePayloadData
    {
        public AddCoursePayloadData(global::System.String __typename, global::StrawberryShake.EntityId? course = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Course = course;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? Course { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class AddEditSchoolPayloadData
    {
        public AddEditSchoolPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? school = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            School = school;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? School { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class CatalogueClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "CourseDto" => ParseCourseDtoEntityId(obj, __typename),
                "SchoolDto" => ParseSchoolDtoEntityId(obj, __typename),
                "Course" => ParseCourseEntityId(obj, __typename),
                "School" => ParseSchoolEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "CourseDto" => FormatCourseDtoEntityId(entityId),
                "SchoolDto" => FormatSchoolDtoEntityId(entityId),
                "Course" => FormatCourseEntityId(entityId),
                "School" => FormatSchoolEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseCourseDtoEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatCourseDtoEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSchoolDtoEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatSchoolDtoEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCourseEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatCourseEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSchoolEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatSchoolEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public partial class CatalogueClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public CatalogueClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.0.0")]
    public static partial class CatalogueClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Catalogue.Client.State.CatalogueClientStoreAccessor> AddCatalogueClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Catalogue.Client.State.CatalogueClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.AddCourseDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.UpdateCourseDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.AddSchoolDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.UpdateSchoolDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.GetCourseListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.GetSchoolListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.CatalogueClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.ICatalogueClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Catalogue.Client.State.CatalogueClientStoreAccessor>("CatalogueClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("CatalogueClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, global::Catalogue.Client.AddCourseData_AddCourse_Course_CourseDto>, global::Catalogue.Client.State.AddCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, global::Catalogue.Client.UpdateCourseData_UpdateCourse_Course_CourseDto>, global::Catalogue.Client.State.UpdateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, global::Catalogue.Client.AddSchoolData_CreateSchool_School_SchoolDto>, global::Catalogue.Client.State.AddSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, global::Catalogue.Client.UpdateSchoolData_UpdateSchool_School_SchoolDto>, global::Catalogue.Client.State.UpdateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseEntity, global::Catalogue.Client.GetCourseList_CourseList_Course>, global::Catalogue.Client.State.GetCourseList_CourseList_CourseFromCourseEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolEntity, global::Catalogue.Client.GetSchoolList_AllSchools_School>, global::Catalogue.Client.State.GetSchoolList_AllSchools_SchoolFromSchoolEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Catalogue.Client.CourseDtoInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Catalogue.Client.SchoolDtoInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddCourseDataResult>, global::Catalogue.Client.State.AddCourseDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddCourseDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IAddCourseDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddCourseDataResult>, global::Catalogue.Client.State.AddCourseDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IAddCourseDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddCourseDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddCourseDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.AddCourseDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IAddCourseDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.AddCourseDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateCourseDataResult>, global::Catalogue.Client.State.UpdateCourseDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateCourseDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IUpdateCourseDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateCourseDataResult>, global::Catalogue.Client.State.UpdateCourseDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IUpdateCourseDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateCourseDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateCourseDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.UpdateCourseDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IUpdateCourseDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.UpdateCourseDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddSchoolDataResult>, global::Catalogue.Client.State.AddSchoolDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddSchoolDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IAddSchoolDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddSchoolDataResult>, global::Catalogue.Client.State.AddSchoolDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IAddSchoolDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddSchoolDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddSchoolDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.AddSchoolDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IAddSchoolDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.AddSchoolDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateSchoolDataResult>, global::Catalogue.Client.State.UpdateSchoolDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateSchoolDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IUpdateSchoolDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateSchoolDataResult>, global::Catalogue.Client.State.UpdateSchoolDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IUpdateSchoolDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateSchoolDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateSchoolDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.UpdateSchoolDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IUpdateSchoolDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.UpdateSchoolDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetCourseListResult>, global::Catalogue.Client.State.GetCourseListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetCourseListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IGetCourseListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetCourseListResult>, global::Catalogue.Client.State.GetCourseListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IGetCourseListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetCourseListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetCourseListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.GetCourseListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IGetCourseListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.GetCourseListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetSchoolListResult>, global::Catalogue.Client.State.GetSchoolListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetSchoolListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IGetSchoolListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetSchoolListResult>, global::Catalogue.Client.State.GetSchoolListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IGetSchoolListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetSchoolListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetSchoolListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.GetSchoolListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IGetSchoolListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.GetSchoolListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Catalogue.Client.State.CatalogueClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.CatalogueClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.ICatalogueClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.CatalogueClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
