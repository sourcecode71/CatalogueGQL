// <auto-generated/>
#nullable enable

namespace CatalogueGQL.Client.GraphQLAPIClient
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FetchMajorListResult : global::System.IEquatable<FetchMajorListResult>, IFetchMajorListResult
    {
        public FetchMajorListResult(global::System.Collections.Generic.IReadOnlyList<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major> major)
        {
            Major = major;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major> Major { get; }

        public virtual global::System.Boolean Equals(FetchMajorListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Major, other.Major));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchMajorListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Major_elm in Major)
                {
                    hash ^= 397 * Major_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Offer Degree from the university
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FetchMajorList_Major_Major : global::System.IEquatable<FetchMajorList_Major_Major>, IFetchMajorList_Major_Major
    {
        public FetchMajorList_Major_Major(global::System.Int32 id, global::System.String code, global::System.String title, global::System.Collections.Generic.IReadOnlyList<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major_Courses> courses)
        {
            Id = id;
            Code = code;
            Title = title;
            Courses = courses;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Code { get; }

        public global::System.String Title { get; }

        /// <summary>
        /// Avialable coures for the specific major
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major_Courses> Courses { get; }

        public virtual global::System.Boolean Equals(FetchMajorList_Major_Major? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Code.Equals(other.Code) && Title.Equals(other.Title) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Courses, other.Courses);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchMajorList_Major_Major)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                foreach (var Courses_elm in Courses)
                {
                    hash ^= 397 * Courses_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Offer courses from university for a major
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FetchMajorList_Major_Courses_Courses : global::System.IEquatable<FetchMajorList_Major_Courses_Courses>, IFetchMajorList_Major_Courses_Courses
    {
        public FetchMajorList_Major_Courses_Courses(global::System.Int32 id, global::System.String code, global::System.String title, global::System.Int32 majorId)
        {
            Id = id;
            Code = code;
            Title = title;
            MajorId = majorId;
        }

        public global::System.Int32 Id { get; }

        /// <summary>
        /// Course Code
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Course Title
        /// </summary>
        public global::System.String Title { get; }

        public global::System.Int32 MajorId { get; }

        public virtual global::System.Boolean Equals(FetchMajorList_Major_Courses_Courses? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Code.Equals(other.Code) && Title.Equals(other.Title) && MajorId == other.MajorId;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchMajorList_Major_Courses_Courses)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * MajorId.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFetchMajorListResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major> Major { get; }
    }

    /// <summary>
    /// Offer Degree from the university
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFetchMajorList_Major
    {
        public global::System.Int32 Id { get; }

        public global::System.String Code { get; }

        public global::System.String Title { get; }

        /// <summary>
        /// Avialable coures for the specific major
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major_Courses> Courses { get; }
    }

    /// <summary>
    /// Offer Degree from the university
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFetchMajorList_Major_Major : IFetchMajorList_Major
    {
    }

    /// <summary>
    /// Offer courses from university for a major
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFetchMajorList_Major_Courses
    {
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Course Code
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Course Title
        /// </summary>
        public global::System.String Title { get; }

        public global::System.Int32 MajorId { get; }
    }

    /// <summary>
    /// Offer courses from university for a major
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFetchMajorList_Major_Courses_Courses : IFetchMajorList_Major_Courses
    {
    }

    /// <summary>
    /// Represents the operation service of the FetchMajorList GraphQL operation
    /// <code>
    /// query FetchMajorList {
    ///   major {
    ///     __typename
    ///     id
    ///     code
    ///     title
    ///     courses {
    ///       __typename
    ///       id
    ///       code
    ///       title
    ///       majorId
    ///       ... on Courses {
    ///         id
    ///       }
    ///     }
    ///     ... on Major {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FetchMajorListQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchMajorListQueryDocument()
        {
        }

        public static FetchMajorListQueryDocument Instance { get; } = new FetchMajorListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "63c4a207da30e917d1318ca13b06e7e0");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchMajorList GraphQL operation
    /// <code>
    /// query FetchMajorList {
    ///   major {
    ///     __typename
    ///     id
    ///     code
    ///     title
    ///     courses {
    ///       __typename
    ///       id
    ///       code
    ///       title
    ///       majorId
    ///       ... on Courses {
    ///         id
    ///       }
    ///     }
    ///     ... on Major {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FetchMajorListQuery : global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchMajorListResult> _operationExecutor;
        public FetchMajorListQuery(global::StrawberryShake.IOperationExecutor<IFetchMajorListResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchMajorListResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchMajorListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchMajorListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchMajorListQueryDocument.Instance.Hash.Value, name: "FetchMajorList", document: FetchMajorListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchMajorList GraphQL operation
    /// <code>
    /// query FetchMajorList {
    ///   major {
    ///     __typename
    ///     id
    ///     code
    ///     title
    ///     courses {
    ///       __typename
    ///       id
    ///       code
    ///       title
    ///       majorId
    ///       ... on Courses {
    ///         id
    ///       }
    ///     }
    ///     ... on Major {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFetchMajorListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchMajorListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchMajorListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the CatalogueGQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CatalogueGQLClient : global::CatalogueGQL.Client.GraphQLAPIClient.ICatalogueGQLClient
    {
        private readonly global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListQuery _fetchMajorList;
        public CatalogueGQLClient(global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListQuery fetchMajorList)
        {
            _fetchMajorList = fetchMajorList ?? throw new global::System.ArgumentNullException(nameof(fetchMajorList));
        }

        public static global::System.String ClientName => "CatalogueGQLClient";
        public global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListQuery FetchMajorList => _fetchMajorList;
    }

    /// <summary>
    /// Represents the CatalogueGQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICatalogueGQLClient
    {
        global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListQuery FetchMajorList { get; }
    }
}

namespace CatalogueGQL.Client.GraphQLAPIClient.State
{
    ///<summary>Offer Degree from the university</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class MajorEntity
    {
        public MajorEntity(global::System.Int32 id = default !, global::System.String code = default !, global::System.String title = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> courses = default !)
        {
            Id = id;
            Code = code;
            Title = title;
            Courses = courses;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Code { get; }

        public global::System.String Title { get; }

        ///<summary>Avialable coures for the specific major</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Courses { get; }
    }

    ///<summary>Offer courses from university for a major</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoursesEntity
    {
        public CoursesEntity(global::System.Int32 id = default !, global::System.String code = default !, global::System.String title = default !, global::System.Int32 majorId = default !)
        {
            Id = id;
            Code = code;
            Title = title;
            MajorId = majorId;
        }

        public global::System.Int32 Id { get; }

        ///<summary>Course Code</summary>
        public global::System.String Code { get; }

        ///<summary>Course Title</summary>
        public global::System.String Title { get; }

        public global::System.Int32 MajorId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FetchMajorListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::CatalogueGQL.Client.GraphQLAPIClient.FetchMajorListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::CatalogueGQL.Client.GraphQLAPIClient.State.MajorEntity, FetchMajorList_Major_Major> _fetchMajorList_Major_MajorFromMajorEntityMapper;
        public FetchMajorListResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::CatalogueGQL.Client.GraphQLAPIClient.State.MajorEntity, FetchMajorList_Major_Major> fetchMajorList_Major_MajorFromMajorEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fetchMajorList_Major_MajorFromMajorEntityMapper = fetchMajorList_Major_MajorFromMajorEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fetchMajorList_Major_MajorFromMajorEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListResult);
        public FetchMajorListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchMajorListResultInfo info)
            {
                return new FetchMajorListResult(MapNonNullableIFetchMajorList_MajorNonNullableArray(info.Major, snapshot));
            }

            throw new global::System.ArgumentException("FetchMajorListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major> MapNonNullableIFetchMajorList_MajorNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var majors = new global::System.Collections.Generic.List<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                majors.Add(MapNonNullableIFetchMajorList_Major(child, snapshot));
            }

            return majors;
        }

        private global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major MapNonNullableIFetchMajorList_Major(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Major", global::System.StringComparison.Ordinal))
            {
                return _fetchMajorList_Major_MajorFromMajorEntityMapper.Map(snapshot.GetEntity<global::CatalogueGQL.Client.GraphQLAPIClient.State.MajorEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FetchMajorListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchMajorListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> major, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Major = major;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Major { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchMajorListResultInfo(Major, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FetchMajorList_Major_MajorFromMajorEntityMapper : global::StrawberryShake.IEntityMapper<global::CatalogueGQL.Client.GraphQLAPIClient.State.MajorEntity, FetchMajorList_Major_Major>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::CatalogueGQL.Client.GraphQLAPIClient.State.CoursesEntity, FetchMajorList_Major_Courses_Courses> _fetchMajorList_Major_Courses_CoursesFromCoursesEntityMapper;
        public FetchMajorList_Major_MajorFromMajorEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::CatalogueGQL.Client.GraphQLAPIClient.State.CoursesEntity, FetchMajorList_Major_Courses_Courses> fetchMajorList_Major_Courses_CoursesFromCoursesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fetchMajorList_Major_Courses_CoursesFromCoursesEntityMapper = fetchMajorList_Major_Courses_CoursesFromCoursesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fetchMajorList_Major_Courses_CoursesFromCoursesEntityMapper));
        }

        public FetchMajorList_Major_Major Map(global::CatalogueGQL.Client.GraphQLAPIClient.State.MajorEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FetchMajorList_Major_Major(entity.Id, entity.Code, entity.Title, MapNonNullableIFetchMajorList_Major_CoursesNonNullableArray(entity.Courses, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major_Courses> MapNonNullableIFetchMajorList_Major_CoursesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var coursess = new global::System.Collections.Generic.List<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major_Courses>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                coursess.Add(MapNonNullableIFetchMajorList_Major_Courses(child, snapshot));
            }

            return coursess;
        }

        private global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorList_Major_Courses MapNonNullableIFetchMajorList_Major_Courses(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Courses", global::System.StringComparison.Ordinal))
            {
                return _fetchMajorList_Major_Courses_CoursesFromCoursesEntityMapper.Map(snapshot.GetEntity<global::CatalogueGQL.Client.GraphQLAPIClient.State.CoursesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FetchMajorList_Major_Courses_CoursesFromCoursesEntityMapper : global::StrawberryShake.IEntityMapper<global::CatalogueGQL.Client.GraphQLAPIClient.State.CoursesEntity, FetchMajorList_Major_Courses_Courses>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchMajorList_Major_Courses_CoursesFromCoursesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public FetchMajorList_Major_Courses_Courses Map(global::CatalogueGQL.Client.GraphQLAPIClient.State.CoursesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FetchMajorList_Major_Courses_Courses(entity.Id, entity.Code, entity.Title, entity.MajorId);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FetchMajorListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public FetchMajorListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchMajorListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchMajorListResult Result, FetchMajorListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IFetchMajorListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchMajorListResult, FetchMajorListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> majorId = default !;
            _entityStore.Update(session =>
            {
                majorId = UpdateNonNullableIFetchMajorList_MajorEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "major"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchMajorListResultInfo(majorId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIFetchMajorList_MajorEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var majors = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                majors.Add(UpdateNonNullableIFetchMajorList_MajorEntity(session, child, entityIds));
            }

            return majors;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIFetchMajorList_MajorEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Major", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::CatalogueGQL.Client.GraphQLAPIClient.State.MajorEntity? entity))
                {
                    session.SetEntity(entityId, new global::CatalogueGQL.Client.GraphQLAPIClient.State.MajorEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), UpdateNonNullableIFetchMajorList_Major_CoursesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courses"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::CatalogueGQL.Client.GraphQLAPIClient.State.MajorEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), UpdateNonNullableIFetchMajorList_Major_CoursesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courses"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIFetchMajorList_Major_CoursesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var coursess = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                coursess.Add(UpdateNonNullableIFetchMajorList_Major_CoursesEntity(session, child, entityIds));
            }

            return coursess;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIFetchMajorList_Major_CoursesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Courses", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::CatalogueGQL.Client.GraphQLAPIClient.State.CoursesEntity? entity))
                {
                    session.SetEntity(entityId, new global::CatalogueGQL.Client.GraphQLAPIClient.State.CoursesEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "majorId"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::CatalogueGQL.Client.GraphQLAPIClient.State.CoursesEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "majorId"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CatalogueGQLClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Major" => ParseMajorEntityId(obj, __typename),
                "Courses" => ParseCoursesEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Major" => FormatMajorEntityId(entityId),
                "Courses" => FormatCoursesEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseMajorEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatMajorEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCoursesEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatCoursesEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CatalogueGQLClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public CatalogueGQLClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public static partial class CatalogueGQLClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::CatalogueGQL.Client.GraphQLAPIClient.State.CatalogueGQLClientStoreAccessor> AddCatalogueGQLClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::CatalogueGQL.Client.GraphQLAPIClient.State.CatalogueGQLClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::CatalogueGQL.Client.GraphQLAPIClient.FetchMajorListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::CatalogueGQL.Client.GraphQLAPIClient.CatalogueGQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::CatalogueGQL.Client.GraphQLAPIClient.ICatalogueGQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::CatalogueGQL.Client.GraphQLAPIClient.State.CatalogueGQLClientStoreAccessor>("CatalogueGQLClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("CatalogueGQLClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::CatalogueGQL.Client.GraphQLAPIClient.State.MajorEntity, global::CatalogueGQL.Client.GraphQLAPIClient.FetchMajorList_Major_Major>, global::CatalogueGQL.Client.GraphQLAPIClient.State.FetchMajorList_Major_MajorFromMajorEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::CatalogueGQL.Client.GraphQLAPIClient.State.CoursesEntity, global::CatalogueGQL.Client.GraphQLAPIClient.FetchMajorList_Major_Courses_Courses>, global::CatalogueGQL.Client.GraphQLAPIClient.State.FetchMajorList_Major_Courses_CoursesFromCoursesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListResult>, global::CatalogueGQL.Client.GraphQLAPIClient.State.FetchMajorListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListResult>, global::CatalogueGQL.Client.GraphQLAPIClient.State.FetchMajorListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::CatalogueGQL.Client.GraphQLAPIClient.FetchMajorListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::CatalogueGQL.Client.GraphQLAPIClient.IFetchMajorListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::CatalogueGQL.Client.GraphQLAPIClient.FetchMajorListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::CatalogueGQL.Client.GraphQLAPIClient.State.CatalogueGQLClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::CatalogueGQL.Client.GraphQLAPIClient.CatalogueGQLClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::CatalogueGQL.Client.GraphQLAPIClient.ICatalogueGQLClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::CatalogueGQL.Client.GraphQLAPIClient.CatalogueGQLClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
