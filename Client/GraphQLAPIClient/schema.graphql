schema {
  query: CatalogueQueryResolver
  mutation: CourseMutationResolver
}

type CatalogueQueryResolver {
  "Gets the list of Course."
  courseList(order: [CourseSortInput!] where: CourseFilterInput): [Course!]!
  "Gets the list of School."
  allSchools(order: [SchoolSortInput!] where: SchoolFilterInput): [School!]!
  "Gets the School."
  schoolById(id: Int!): School!
}

type CourseMutationResolver {
  "Add a new course data."
  addCourse(course: CourseDtoInput!): AddCoursePayload!
  "Course Update"
  updateCourse(course: CourseDtoInput!): AddCoursePayload!
  "Create the School."
  createSchool(school: SchoolDtoInput!): AddEditSchoolPayload!
  "Delete the School."
  deleteSchool(id: Int!): Int!
  "Update the School."
  updateSchool(school: SchoolDtoInput!): AddEditSchoolPayload!
}

input CourseSortInput {
  id: SortEnumType
  code: SortEnumType
  title: SortEnumType
  creditHours: SortEnumType
  schoolId: SortEnumType
  school: SchoolSortInput
  setUser: SortEnumType
  setDate: SortEnumType
  isDeleted: SortEnumType
}

input CourseFilterInput {
  and: [CourseFilterInput!]
  or: [CourseFilterInput!]
  id: ComparableInt32OperationFilterInput
  code: StringOperationFilterInput
  title: StringOperationFilterInput
  creditHours: ComparableDoubleOperationFilterInput
  schoolId: ComparableInt32OperationFilterInput
  school: SchoolFilterInput
  setUser: ComparableInt32OperationFilterInput
  setDate: ComparableDateTimeOperationFilterInput
  isDeleted: BooleanOperationFilterInput
}

input SchoolSortInput {
  id: SortEnumType
  title: SortEnumType
  name: SortEnumType
  setUser: SortEnumType
  setDate: SortEnumType
  isDeleted: SortEnumType
}

input SchoolFilterInput {
  and: [SchoolFilterInput!]
  or: [SchoolFilterInput!]
  id: ComparableInt32OperationFilterInput
  title: StringOperationFilterInput
  name: StringOperationFilterInput
  course: ListFilterInputTypeOfCourseFilterInput
  setUser: ComparableInt32OperationFilterInput
  setDate: ComparableDateTimeOperationFilterInput
  isDeleted: BooleanOperationFilterInput
}

enum SortEnumType {
  ASC
  DESC
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ComparableDoubleOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ListFilterInputTypeOfCourseFilterInput {
  all: CourseFilterInput
  none: CourseFilterInput
  some: CourseFilterInput
  any: Boolean
}

type School {
  id: Int!
  title: String!
  name: String!
  course: [Course!]!
  setUser: Int!
  setDate: DateTime!
  isDeleted: Boolean!
}

input CourseDtoInput {
  id: Int
  code: String
  title: String
  creditHours: Float!
  schoolId: Int!
}

type AddCoursePayload {
  course: CourseDto!
}

type Course {
  id: Int!
  code: String!
  title: String!
  creditHours: Float!
  schoolId: Int!
  school: School!
  setUser: Int!
  setDate: DateTime!
  isDeleted: Boolean!
}

type AddEditSchoolPayload {
  school: SchoolDto!
}

input SchoolDtoInput {
  id: Int
  title: String
  name: String
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

type SchoolDto {
  id: Int
  title: String
  name: String
}

type CourseDto {
  id: Int
  code: String
  title: String
  creditHours: Float!
  schoolId: Int!
}