[{"Name":"CatalogueClient","SourceText":"// <auto-generated/>\r\n#nullable enable\r\n\r\nnamespace Catalogue.Client\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddCourseDataResult : global::System.IEquatable<AddCourseDataResult>, IAddCourseDataResult\r\n    {\r\n        public AddCourseDataResult(global::Catalogue.Client.IAddCourseData_AddCourse addCourse)\r\n        {\r\n            AddCourse = addCourse;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Add a new course data.\r\n        /// </summary>\r\n        public global::Catalogue.Client.IAddCourseData_AddCourse AddCourse { get; }\r\n\r\n        public virtual global::System.Boolean Equals(AddCourseDataResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (AddCourse.Equals(other.AddCourse));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((AddCourseDataResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * AddCourse.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddCourseData_AddCourse_AddCoursePayload : global::System.IEquatable<AddCourseData_AddCourse_AddCoursePayload>, IAddCourseData_AddCourse_AddCoursePayload\r\n    {\r\n        public AddCourseData_AddCourse_AddCoursePayload(global::Catalogue.Client.IAddCourseData_AddCourse_Course course)\r\n        {\r\n            Course = course;\r\n        }\r\n\r\n        public global::Catalogue.Client.IAddCourseData_AddCourse_Course Course { get; }\r\n\r\n        public virtual global::System.Boolean Equals(AddCourseData_AddCourse_AddCoursePayload? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (Course.Equals(other.Course));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((AddCourseData_AddCourse_AddCoursePayload)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * Course.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddCourseData_AddCourse_Course_CourseDto : global::System.IEquatable<AddCourseData_AddCourse_Course_CourseDto>, IAddCourseData_AddCourse_Course_CourseDto\r\n    {\r\n        public AddCourseData_AddCourse_Course_CourseDto(global::System.String? title)\r\n        {\r\n            Title = title;\r\n        }\r\n\r\n        public global::System.String? Title { get; }\r\n\r\n        public virtual global::System.Boolean Equals(AddCourseData_AddCourse_Course_CourseDto? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((AddCourseData_AddCourse_Course_CourseDto)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (Title != null)\r\n                {\r\n                    hash ^= 397 * Title.GetHashCode();\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddCourseDataResult\r\n    {\r\n        /// <summary>\r\n        /// Add a new course data.\r\n        /// </summary>\r\n        public global::Catalogue.Client.IAddCourseData_AddCourse AddCourse { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddCourseData_AddCourse\r\n    {\r\n        public global::Catalogue.Client.IAddCourseData_AddCourse_Course Course { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddCourseData_AddCourse_AddCoursePayload : IAddCourseData_AddCourse\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddCourseData_AddCourse_Course\r\n    {\r\n        public global::System.String? Title { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddCourseData_AddCourse_Course_CourseDto : IAddCourseData_AddCourse_Course\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateCourseDataResult : global::System.IEquatable<UpdateCourseDataResult>, IUpdateCourseDataResult\r\n    {\r\n        public UpdateCourseDataResult(global::Catalogue.Client.IUpdateCourseData_UpdateCourse updateCourse)\r\n        {\r\n            UpdateCourse = updateCourse;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Course Update\r\n        /// </summary>\r\n        public global::Catalogue.Client.IUpdateCourseData_UpdateCourse UpdateCourse { get; }\r\n\r\n        public virtual global::System.Boolean Equals(UpdateCourseDataResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (UpdateCourse.Equals(other.UpdateCourse));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((UpdateCourseDataResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * UpdateCourse.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateCourseData_UpdateCourse_AddCoursePayload : global::System.IEquatable<UpdateCourseData_UpdateCourse_AddCoursePayload>, IUpdateCourseData_UpdateCourse_AddCoursePayload\r\n    {\r\n        public UpdateCourseData_UpdateCourse_AddCoursePayload(global::Catalogue.Client.IUpdateCourseData_UpdateCourse_Course course)\r\n        {\r\n            Course = course;\r\n        }\r\n\r\n        public global::Catalogue.Client.IUpdateCourseData_UpdateCourse_Course Course { get; }\r\n\r\n        public virtual global::System.Boolean Equals(UpdateCourseData_UpdateCourse_AddCoursePayload? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (Course.Equals(other.Course));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((UpdateCourseData_UpdateCourse_AddCoursePayload)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * Course.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateCourseData_UpdateCourse_Course_CourseDto : global::System.IEquatable<UpdateCourseData_UpdateCourse_Course_CourseDto>, IUpdateCourseData_UpdateCourse_Course_CourseDto\r\n    {\r\n        public UpdateCourseData_UpdateCourse_Course_CourseDto(global::System.String? title)\r\n        {\r\n            Title = title;\r\n        }\r\n\r\n        public global::System.String? Title { get; }\r\n\r\n        public virtual global::System.Boolean Equals(UpdateCourseData_UpdateCourse_Course_CourseDto? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((UpdateCourseData_UpdateCourse_Course_CourseDto)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (Title != null)\r\n                {\r\n                    hash ^= 397 * Title.GetHashCode();\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateCourseDataResult\r\n    {\r\n        /// <summary>\r\n        /// Course Update\r\n        /// </summary>\r\n        public global::Catalogue.Client.IUpdateCourseData_UpdateCourse UpdateCourse { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateCourseData_UpdateCourse\r\n    {\r\n        public global::Catalogue.Client.IUpdateCourseData_UpdateCourse_Course Course { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateCourseData_UpdateCourse_AddCoursePayload : IUpdateCourseData_UpdateCourse\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateCourseData_UpdateCourse_Course\r\n    {\r\n        public global::System.String? Title { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateCourseData_UpdateCourse_Course_CourseDto : IUpdateCourseData_UpdateCourse_Course\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddSchoolDataResult : global::System.IEquatable<AddSchoolDataResult>, IAddSchoolDataResult\r\n    {\r\n        public AddSchoolDataResult(global::Catalogue.Client.IAddSchoolData_CreateSchool createSchool)\r\n        {\r\n            CreateSchool = createSchool;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Create the School.\r\n        /// </summary>\r\n        public global::Catalogue.Client.IAddSchoolData_CreateSchool CreateSchool { get; }\r\n\r\n        public virtual global::System.Boolean Equals(AddSchoolDataResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (CreateSchool.Equals(other.CreateSchool));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((AddSchoolDataResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * CreateSchool.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddSchoolData_CreateSchool_AddEditSchoolPayload : global::System.IEquatable<AddSchoolData_CreateSchool_AddEditSchoolPayload>, IAddSchoolData_CreateSchool_AddEditSchoolPayload\r\n    {\r\n        public AddSchoolData_CreateSchool_AddEditSchoolPayload(global::Catalogue.Client.IAddSchoolData_CreateSchool_School school)\r\n        {\r\n            School = school;\r\n        }\r\n\r\n        public global::Catalogue.Client.IAddSchoolData_CreateSchool_School School { get; }\r\n\r\n        public virtual global::System.Boolean Equals(AddSchoolData_CreateSchool_AddEditSchoolPayload? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (School.Equals(other.School));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((AddSchoolData_CreateSchool_AddEditSchoolPayload)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * School.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddSchoolData_CreateSchool_School_SchoolDto : global::System.IEquatable<AddSchoolData_CreateSchool_School_SchoolDto>, IAddSchoolData_CreateSchool_School_SchoolDto\r\n    {\r\n        public AddSchoolData_CreateSchool_School_SchoolDto(global::System.String? title)\r\n        {\r\n            Title = title;\r\n        }\r\n\r\n        public global::System.String? Title { get; }\r\n\r\n        public virtual global::System.Boolean Equals(AddSchoolData_CreateSchool_School_SchoolDto? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((AddSchoolData_CreateSchool_School_SchoolDto)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (Title != null)\r\n                {\r\n                    hash ^= 397 * Title.GetHashCode();\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddSchoolDataResult\r\n    {\r\n        /// <summary>\r\n        /// Create the School.\r\n        /// </summary>\r\n        public global::Catalogue.Client.IAddSchoolData_CreateSchool CreateSchool { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddSchoolData_CreateSchool\r\n    {\r\n        public global::Catalogue.Client.IAddSchoolData_CreateSchool_School School { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddSchoolData_CreateSchool_AddEditSchoolPayload : IAddSchoolData_CreateSchool\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddSchoolData_CreateSchool_School\r\n    {\r\n        public global::System.String? Title { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddSchoolData_CreateSchool_School_SchoolDto : IAddSchoolData_CreateSchool_School\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateSchoolDataResult : global::System.IEquatable<UpdateSchoolDataResult>, IUpdateSchoolDataResult\r\n    {\r\n        public UpdateSchoolDataResult(global::Catalogue.Client.IUpdateSchoolData_UpdateSchool updateSchool)\r\n        {\r\n            UpdateSchool = updateSchool;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Update the School.\r\n        /// </summary>\r\n        public global::Catalogue.Client.IUpdateSchoolData_UpdateSchool UpdateSchool { get; }\r\n\r\n        public virtual global::System.Boolean Equals(UpdateSchoolDataResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (UpdateSchool.Equals(other.UpdateSchool));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((UpdateSchoolDataResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * UpdateSchool.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateSchoolData_UpdateSchool_AddEditSchoolPayload : global::System.IEquatable<UpdateSchoolData_UpdateSchool_AddEditSchoolPayload>, IUpdateSchoolData_UpdateSchool_AddEditSchoolPayload\r\n    {\r\n        public UpdateSchoolData_UpdateSchool_AddEditSchoolPayload(global::Catalogue.Client.IUpdateSchoolData_UpdateSchool_School school)\r\n        {\r\n            School = school;\r\n        }\r\n\r\n        public global::Catalogue.Client.IUpdateSchoolData_UpdateSchool_School School { get; }\r\n\r\n        public virtual global::System.Boolean Equals(UpdateSchoolData_UpdateSchool_AddEditSchoolPayload? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (School.Equals(other.School));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((UpdateSchoolData_UpdateSchool_AddEditSchoolPayload)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * School.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateSchoolData_UpdateSchool_School_SchoolDto : global::System.IEquatable<UpdateSchoolData_UpdateSchool_School_SchoolDto>, IUpdateSchoolData_UpdateSchool_School_SchoolDto\r\n    {\r\n        public UpdateSchoolData_UpdateSchool_School_SchoolDto(global::System.Int32? id, global::System.String? title, global::System.String? name)\r\n        {\r\n            Id = id;\r\n            Title = title;\r\n            Name = name;\r\n        }\r\n\r\n        public global::System.Int32? Id { get; }\r\n\r\n        public global::System.String? Title { get; }\r\n\r\n        public global::System.String? Name { get; }\r\n\r\n        public virtual global::System.Boolean Equals(UpdateSchoolData_UpdateSchool_School_SchoolDto? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (Id == other.Id) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((UpdateSchoolData_UpdateSchool_School_SchoolDto)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (Id != null)\r\n                {\r\n                    hash ^= 397 * Id.GetHashCode();\r\n                }\r\n\r\n                if (Title != null)\r\n                {\r\n                    hash ^= 397 * Title.GetHashCode();\r\n                }\r\n\r\n                if (Name != null)\r\n                {\r\n                    hash ^= 397 * Name.GetHashCode();\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateSchoolDataResult\r\n    {\r\n        /// <summary>\r\n        /// Update the School.\r\n        /// </summary>\r\n        public global::Catalogue.Client.IUpdateSchoolData_UpdateSchool UpdateSchool { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateSchoolData_UpdateSchool\r\n    {\r\n        public global::Catalogue.Client.IUpdateSchoolData_UpdateSchool_School School { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateSchoolData_UpdateSchool_AddEditSchoolPayload : IUpdateSchoolData_UpdateSchool\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateSchoolData_UpdateSchool_School\r\n    {\r\n        public global::System.Int32? Id { get; }\r\n\r\n        public global::System.String? Title { get; }\r\n\r\n        public global::System.String? Name { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateSchoolData_UpdateSchool_School_SchoolDto : IUpdateSchoolData_UpdateSchool_School\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetCourseListResult : global::System.IEquatable<GetCourseListResult>, IGetCourseListResult\r\n    {\r\n        public GetCourseListResult(global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetCourseList_CourseList> courseList)\r\n        {\r\n            CourseList = courseList;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets the list of Course.\r\n        /// </summary>\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetCourseList_CourseList> CourseList { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetCourseListResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(CourseList, other.CourseList));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetCourseListResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                foreach (var CourseList_elm in CourseList)\r\n                {\r\n                    hash ^= 397 * CourseList_elm.GetHashCode();\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetCourseList_CourseList_Course : global::System.IEquatable<GetCourseList_CourseList_Course>, IGetCourseList_CourseList_Course\r\n    {\r\n        public GetCourseList_CourseList_Course(global::System.Int32 id, global::System.String code, global::System.String title, global::System.Double creditHours)\r\n        {\r\n            Id = id;\r\n            Code = code;\r\n            Title = title;\r\n            CreditHours = creditHours;\r\n        }\r\n\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String Code { get; }\r\n\r\n        public global::System.String Title { get; }\r\n\r\n        public global::System.Double CreditHours { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetCourseList_CourseList_Course? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (Id == other.Id) && Code.Equals(other.Code) && Title.Equals(other.Title) && CreditHours == other.CreditHours;\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetCourseList_CourseList_Course)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * Id.GetHashCode();\r\n                hash ^= 397 * Code.GetHashCode();\r\n                hash ^= 397 * Title.GetHashCode();\r\n                hash ^= 397 * CreditHours.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IGetCourseListResult\r\n    {\r\n        /// <summary>\r\n        /// Gets the list of Course.\r\n        /// </summary>\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetCourseList_CourseList> CourseList { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IGetCourseList_CourseList\r\n    {\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String Code { get; }\r\n\r\n        public global::System.String Title { get; }\r\n\r\n        public global::System.Double CreditHours { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IGetCourseList_CourseList_Course : IGetCourseList_CourseList\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetSchoolListResult : global::System.IEquatable<GetSchoolListResult>, IGetSchoolListResult\r\n    {\r\n        public GetSchoolListResult(global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetSchoolList_AllSchools> allSchools)\r\n        {\r\n            AllSchools = allSchools;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets the list of School.\r\n        /// </summary>\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetSchoolList_AllSchools> AllSchools { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetSchoolListResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AllSchools, other.AllSchools));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetSchoolListResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                foreach (var AllSchools_elm in AllSchools)\r\n                {\r\n                    hash ^= 397 * AllSchools_elm.GetHashCode();\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetSchoolList_AllSchools_School : global::System.IEquatable<GetSchoolList_AllSchools_School>, IGetSchoolList_AllSchools_School\r\n    {\r\n        public GetSchoolList_AllSchools_School(global::System.Int32 id, global::System.String title, global::System.String name)\r\n        {\r\n            Id = id;\r\n            Title = title;\r\n            Name = name;\r\n        }\r\n\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String Title { get; }\r\n\r\n        public global::System.String Name { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetSchoolList_AllSchools_School? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (Id == other.Id) && Title.Equals(other.Title) && Name.Equals(other.Name);\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetSchoolList_AllSchools_School)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * Id.GetHashCode();\r\n                hash ^= 397 * Title.GetHashCode();\r\n                hash ^= 397 * Name.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IGetSchoolListResult\r\n    {\r\n        /// <summary>\r\n        /// Gets the list of School.\r\n        /// </summary>\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetSchoolList_AllSchools> AllSchools { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IGetSchoolList_AllSchools\r\n    {\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String Title { get; }\r\n\r\n        public global::System.String Name { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IGetSchoolList_AllSchools_School : IGetSchoolList_AllSchools\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class CourseDtoInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter\r\n    {\r\n        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;\r\n        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;\r\n        private global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter = default !;\r\n        public global::System.String TypeName => \"CourseDtoInput\";\r\n        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _intFormatter = serializerResolver.GetInputValueFormatter(\"Int\");\r\n            _stringFormatter = serializerResolver.GetInputValueFormatter(\"String\");\r\n            _floatFormatter = serializerResolver.GetInputValueFormatter(\"Float\");\r\n        }\r\n\r\n        public global::System.Object? Format(global::System.Object? runtimeValue)\r\n        {\r\n            if (runtimeValue is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var input = runtimeValue as global::Catalogue.Client.CourseDtoInput;\r\n            var inputInfo = runtimeValue as global::Catalogue.Client.State.ICourseDtoInputInfo;\r\n            if (input is null || inputInfo is null)\r\n            {\r\n                throw new global::System.ArgumentException(nameof(runtimeValue));\r\n            }\r\n\r\n            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();\r\n            if (inputInfo.IsIdSet)\r\n            {\r\n                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(\"id\", FormatId(input.Id)));\r\n            }\r\n\r\n            if (inputInfo.IsCodeSet)\r\n            {\r\n                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(\"code\", FormatCode(input.Code)));\r\n            }\r\n\r\n            if (inputInfo.IsTitleSet)\r\n            {\r\n                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(\"title\", FormatTitle(input.Title)));\r\n            }\r\n\r\n            if (inputInfo.IsCreditHoursSet)\r\n            {\r\n                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(\"creditHours\", FormatCreditHours(input.CreditHours)));\r\n            }\r\n\r\n            if (inputInfo.IsSchoolIdSet)\r\n            {\r\n                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(\"schoolId\", FormatSchoolId(input.SchoolId)));\r\n            }\r\n\r\n            return fields;\r\n        }\r\n\r\n        private global::System.Object? FormatId(global::System.Int32? input)\r\n        {\r\n            if (input is null)\r\n            {\r\n                return input;\r\n            }\r\n            else\r\n            {\r\n                return _intFormatter.Format(input);\r\n            }\r\n        }\r\n\r\n        private global::System.Object? FormatCode(global::System.String? input)\r\n        {\r\n            if (input is null)\r\n            {\r\n                return input;\r\n            }\r\n            else\r\n            {\r\n                return _stringFormatter.Format(input);\r\n            }\r\n        }\r\n\r\n        private global::System.Object? FormatTitle(global::System.String? input)\r\n        {\r\n            if (input is null)\r\n            {\r\n                return input;\r\n            }\r\n            else\r\n            {\r\n                return _stringFormatter.Format(input);\r\n            }\r\n        }\r\n\r\n        private global::System.Object? FormatCreditHours(global::System.Double input)\r\n        {\r\n            return _floatFormatter.Format(input);\r\n        }\r\n\r\n        private global::System.Object? FormatSchoolId(global::System.Int32 input)\r\n        {\r\n            return _intFormatter.Format(input);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class CourseDtoInput : global::Catalogue.Client.State.ICourseDtoInputInfo, global::System.IEquatable<CourseDtoInput>\r\n    {\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((CourseDtoInput)obj);\r\n        }\r\n\r\n        public virtual global::System.Boolean Equals(CourseDtoInput? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (Id == other.Id) && ((Code is null && other.Code is null) || Code != null && Code.Equals(other.Code)) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && CreditHours == other.CreditHours && SchoolId == other.SchoolId;\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (Id != null)\r\n                {\r\n                    hash ^= 397 * Id.GetHashCode();\r\n                }\r\n\r\n                if (Code != null)\r\n                {\r\n                    hash ^= 397 * Code.GetHashCode();\r\n                }\r\n\r\n                if (Title != null)\r\n                {\r\n                    hash ^= 397 * Title.GetHashCode();\r\n                }\r\n\r\n                hash ^= 397 * CreditHours.GetHashCode();\r\n                hash ^= 397 * SchoolId.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n\r\n        private global::System.Int32? _value_id;\r\n        private global::System.Boolean _set_id;\r\n        private global::System.String? _value_code;\r\n        private global::System.Boolean _set_code;\r\n        private global::System.String? _value_title;\r\n        private global::System.Boolean _set_title;\r\n        private global::System.Double _value_creditHours;\r\n        private global::System.Boolean _set_creditHours;\r\n        private global::System.Int32 _value_schoolId;\r\n        private global::System.Boolean _set_schoolId;\r\n        public global::System.Int32? Id\r\n        {\r\n            get => _value_id;\r\n            set\r\n            {\r\n                _set_id = true;\r\n                _value_id = value;\r\n            }\r\n        }\r\n\r\n        global::System.Boolean global::Catalogue.Client.State.ICourseDtoInputInfo.IsIdSet => _set_id;\r\n        public global::System.String? Code\r\n        {\r\n            get => _value_code;\r\n            set\r\n            {\r\n                _set_code = true;\r\n                _value_code = value;\r\n            }\r\n        }\r\n\r\n        global::System.Boolean global::Catalogue.Client.State.ICourseDtoInputInfo.IsCodeSet => _set_code;\r\n        public global::System.String? Title\r\n        {\r\n            get => _value_title;\r\n            set\r\n            {\r\n                _set_title = true;\r\n                _value_title = value;\r\n            }\r\n        }\r\n\r\n        global::System.Boolean global::Catalogue.Client.State.ICourseDtoInputInfo.IsTitleSet => _set_title;\r\n        public global::System.Double CreditHours\r\n        {\r\n            get => _value_creditHours;\r\n            set\r\n            {\r\n                _set_creditHours = true;\r\n                _value_creditHours = value;\r\n            }\r\n        }\r\n\r\n        global::System.Boolean global::Catalogue.Client.State.ICourseDtoInputInfo.IsCreditHoursSet => _set_creditHours;\r\n        public global::System.Int32 SchoolId\r\n        {\r\n            get => _value_schoolId;\r\n            set\r\n            {\r\n                _set_schoolId = true;\r\n                _value_schoolId = value;\r\n            }\r\n        }\r\n\r\n        global::System.Boolean global::Catalogue.Client.State.ICourseDtoInputInfo.IsSchoolIdSet => _set_schoolId;\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class SchoolDtoInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter\r\n    {\r\n        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;\r\n        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;\r\n        public global::System.String TypeName => \"SchoolDtoInput\";\r\n        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _intFormatter = serializerResolver.GetInputValueFormatter(\"Int\");\r\n            _stringFormatter = serializerResolver.GetInputValueFormatter(\"String\");\r\n        }\r\n\r\n        public global::System.Object? Format(global::System.Object? runtimeValue)\r\n        {\r\n            if (runtimeValue is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var input = runtimeValue as global::Catalogue.Client.SchoolDtoInput;\r\n            var inputInfo = runtimeValue as global::Catalogue.Client.State.ISchoolDtoInputInfo;\r\n            if (input is null || inputInfo is null)\r\n            {\r\n                throw new global::System.ArgumentException(nameof(runtimeValue));\r\n            }\r\n\r\n            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();\r\n            if (inputInfo.IsIdSet)\r\n            {\r\n                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(\"id\", FormatId(input.Id)));\r\n            }\r\n\r\n            if (inputInfo.IsTitleSet)\r\n            {\r\n                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(\"title\", FormatTitle(input.Title)));\r\n            }\r\n\r\n            if (inputInfo.IsNameSet)\r\n            {\r\n                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(\"name\", FormatName(input.Name)));\r\n            }\r\n\r\n            return fields;\r\n        }\r\n\r\n        private global::System.Object? FormatId(global::System.Int32? input)\r\n        {\r\n            if (input is null)\r\n            {\r\n                return input;\r\n            }\r\n            else\r\n            {\r\n                return _intFormatter.Format(input);\r\n            }\r\n        }\r\n\r\n        private global::System.Object? FormatTitle(global::System.String? input)\r\n        {\r\n            if (input is null)\r\n            {\r\n                return input;\r\n            }\r\n            else\r\n            {\r\n                return _stringFormatter.Format(input);\r\n            }\r\n        }\r\n\r\n        private global::System.Object? FormatName(global::System.String? input)\r\n        {\r\n            if (input is null)\r\n            {\r\n                return input;\r\n            }\r\n            else\r\n            {\r\n                return _stringFormatter.Format(input);\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class SchoolDtoInput : global::Catalogue.Client.State.ISchoolDtoInputInfo, global::System.IEquatable<SchoolDtoInput>\r\n    {\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((SchoolDtoInput)obj);\r\n        }\r\n\r\n        public virtual global::System.Boolean Equals(SchoolDtoInput? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (Id == other.Id) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (Id != null)\r\n                {\r\n                    hash ^= 397 * Id.GetHashCode();\r\n                }\r\n\r\n                if (Title != null)\r\n                {\r\n                    hash ^= 397 * Title.GetHashCode();\r\n                }\r\n\r\n                if (Name != null)\r\n                {\r\n                    hash ^= 397 * Name.GetHashCode();\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n\r\n        private global::System.Int32? _value_id;\r\n        private global::System.Boolean _set_id;\r\n        private global::System.String? _value_title;\r\n        private global::System.Boolean _set_title;\r\n        private global::System.String? _value_name;\r\n        private global::System.Boolean _set_name;\r\n        public global::System.Int32? Id\r\n        {\r\n            get => _value_id;\r\n            set\r\n            {\r\n                _set_id = true;\r\n                _value_id = value;\r\n            }\r\n        }\r\n\r\n        global::System.Boolean global::Catalogue.Client.State.ISchoolDtoInputInfo.IsIdSet => _set_id;\r\n        public global::System.String? Title\r\n        {\r\n            get => _value_title;\r\n            set\r\n            {\r\n                _set_title = true;\r\n                _value_title = value;\r\n            }\r\n        }\r\n\r\n        global::System.Boolean global::Catalogue.Client.State.ISchoolDtoInputInfo.IsTitleSet => _set_title;\r\n        public global::System.String? Name\r\n        {\r\n            get => _value_name;\r\n            set\r\n            {\r\n                _set_name = true;\r\n                _value_name = value;\r\n            }\r\n        }\r\n\r\n        global::System.Boolean global::Catalogue.Client.State.ISchoolDtoInputInfo.IsNameSet => _set_name;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the AddCourseData GraphQL operation\r\n    /// <code>\r\n    /// mutation AddCourseData($courseData: CourseDtoInput!) {\r\n    ///   addCourse(course: $courseData) {\r\n    ///     __typename\r\n    ///     course {\r\n    ///       __typename\r\n    ///       title\r\n    ///       ... on CourseDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddCourseDataMutationDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private AddCourseDataMutationDocument()\r\n        {\r\n        }\r\n\r\n        public static AddCourseDataMutationDocument Instance { get; } = new AddCourseDataMutationDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"8a5d4961b7b5e0aca179bed3be63a9de\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\r\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the AddCourseData GraphQL operation\r\n    /// <code>\r\n    /// mutation AddCourseData($courseData: CourseDtoInput!) {\r\n    ///   addCourse(course: $courseData) {\r\n    ///     __typename\r\n    ///     course {\r\n    ///       __typename\r\n    ///       title\r\n    ///       ... on CourseDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddCourseDataMutation : global::Catalogue.Client.IAddCourseDataMutation\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IAddCourseDataResult> _operationExecutor;\r\n        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _courseDtoInputFormatter;\r\n        public AddCourseDataMutation(global::StrawberryShake.IOperationExecutor<IAddCourseDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n            _courseDtoInputFormatter = serializerResolver.GetInputValueFormatter(\"CourseDtoInput\");\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddCourseDataResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddCourseDataResult>> ExecuteAsync(global::Catalogue.Client.CourseDtoInput courseData, global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest(courseData);\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddCourseDataResult>> Watch(global::Catalogue.Client.CourseDtoInput courseData, global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest(courseData);\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::Catalogue.Client.CourseDtoInput courseData)\r\n        {\r\n            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();\r\n            variables.Add(\"courseData\", FormatCourseData(courseData));\r\n            return CreateRequest(variables);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: AddCourseDataMutationDocument.Instance.Hash.Value, name: \"AddCourseData\", document: AddCourseDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);\r\n        }\r\n\r\n        private global::System.Object? FormatCourseData(global::Catalogue.Client.CourseDtoInput value)\r\n        {\r\n            if (value is null)\r\n            {\r\n                throw new global::System.ArgumentNullException(nameof(value));\r\n            }\r\n\r\n            return _courseDtoInputFormatter.Format(value);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest(variables!);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the AddCourseData GraphQL operation\r\n    /// <code>\r\n    /// mutation AddCourseData($courseData: CourseDtoInput!) {\r\n    ///   addCourse(course: $courseData) {\r\n    ///     __typename\r\n    ///     course {\r\n    ///       __typename\r\n    ///       title\r\n    ///       ... on CourseDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddCourseDataMutation : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddCourseDataResult>> ExecuteAsync(global::Catalogue.Client.CourseDtoInput courseData, global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddCourseDataResult>> Watch(global::Catalogue.Client.CourseDtoInput courseData, global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the UpdateCourseData GraphQL operation\r\n    /// <code>\r\n    /// mutation UpdateCourseData($scourseData: CourseDtoInput!) {\r\n    ///   updateCourse(course: $scourseData) {\r\n    ///     __typename\r\n    ///     course {\r\n    ///       __typename\r\n    ///       title\r\n    ///       ... on CourseDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateCourseDataMutationDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private UpdateCourseDataMutationDocument()\r\n        {\r\n        }\r\n\r\n        public static UpdateCourseDataMutationDocument Instance { get; } = new UpdateCourseDataMutationDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x20, 0x24, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"d7226ec7041e3ea1e7f065882910bc32\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\r\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the UpdateCourseData GraphQL operation\r\n    /// <code>\r\n    /// mutation UpdateCourseData($scourseData: CourseDtoInput!) {\r\n    ///   updateCourse(course: $scourseData) {\r\n    ///     __typename\r\n    ///     course {\r\n    ///       __typename\r\n    ///       title\r\n    ///       ... on CourseDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateCourseDataMutation : global::Catalogue.Client.IUpdateCourseDataMutation\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IUpdateCourseDataResult> _operationExecutor;\r\n        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _courseDtoInputFormatter;\r\n        public UpdateCourseDataMutation(global::StrawberryShake.IOperationExecutor<IUpdateCourseDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n            _courseDtoInputFormatter = serializerResolver.GetInputValueFormatter(\"CourseDtoInput\");\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateCourseDataResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCourseDataResult>> ExecuteAsync(global::Catalogue.Client.CourseDtoInput scourseData, global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest(scourseData);\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCourseDataResult>> Watch(global::Catalogue.Client.CourseDtoInput scourseData, global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest(scourseData);\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::Catalogue.Client.CourseDtoInput scourseData)\r\n        {\r\n            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();\r\n            variables.Add(\"scourseData\", FormatScourseData(scourseData));\r\n            return CreateRequest(variables);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: UpdateCourseDataMutationDocument.Instance.Hash.Value, name: \"UpdateCourseData\", document: UpdateCourseDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);\r\n        }\r\n\r\n        private global::System.Object? FormatScourseData(global::Catalogue.Client.CourseDtoInput value)\r\n        {\r\n            if (value is null)\r\n            {\r\n                throw new global::System.ArgumentNullException(nameof(value));\r\n            }\r\n\r\n            return _courseDtoInputFormatter.Format(value);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest(variables!);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the UpdateCourseData GraphQL operation\r\n    /// <code>\r\n    /// mutation UpdateCourseData($scourseData: CourseDtoInput!) {\r\n    ///   updateCourse(course: $scourseData) {\r\n    ///     __typename\r\n    ///     course {\r\n    ///       __typename\r\n    ///       title\r\n    ///       ... on CourseDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateCourseDataMutation : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCourseDataResult>> ExecuteAsync(global::Catalogue.Client.CourseDtoInput scourseData, global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCourseDataResult>> Watch(global::Catalogue.Client.CourseDtoInput scourseData, global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the AddSchoolData GraphQL operation\r\n    /// <code>\r\n    /// mutation AddSchoolData($schoolData: SchoolDtoInput!) {\r\n    ///   createSchool(school: $schoolData) {\r\n    ///     __typename\r\n    ///     school {\r\n    ///       __typename\r\n    ///       title\r\n    ///       ... on SchoolDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddSchoolDataMutationDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private AddSchoolDataMutationDocument()\r\n        {\r\n        }\r\n\r\n        public static AddSchoolDataMutationDocument Instance { get; } = new AddSchoolDataMutationDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x74, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x28, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x3a, 0x20, 0x24, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x74, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"2b7b52877e5da44735b761782bead799\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\r\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the AddSchoolData GraphQL operation\r\n    /// <code>\r\n    /// mutation AddSchoolData($schoolData: SchoolDtoInput!) {\r\n    ///   createSchool(school: $schoolData) {\r\n    ///     __typename\r\n    ///     school {\r\n    ///       __typename\r\n    ///       title\r\n    ///       ... on SchoolDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddSchoolDataMutation : global::Catalogue.Client.IAddSchoolDataMutation\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IAddSchoolDataResult> _operationExecutor;\r\n        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _schoolDtoInputFormatter;\r\n        public AddSchoolDataMutation(global::StrawberryShake.IOperationExecutor<IAddSchoolDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n            _schoolDtoInputFormatter = serializerResolver.GetInputValueFormatter(\"SchoolDtoInput\");\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddSchoolDataResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddSchoolDataResult>> ExecuteAsync(global::Catalogue.Client.SchoolDtoInput schoolData, global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest(schoolData);\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddSchoolDataResult>> Watch(global::Catalogue.Client.SchoolDtoInput schoolData, global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest(schoolData);\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::Catalogue.Client.SchoolDtoInput schoolData)\r\n        {\r\n            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();\r\n            variables.Add(\"schoolData\", FormatSchoolData(schoolData));\r\n            return CreateRequest(variables);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: AddSchoolDataMutationDocument.Instance.Hash.Value, name: \"AddSchoolData\", document: AddSchoolDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);\r\n        }\r\n\r\n        private global::System.Object? FormatSchoolData(global::Catalogue.Client.SchoolDtoInput value)\r\n        {\r\n            if (value is null)\r\n            {\r\n                throw new global::System.ArgumentNullException(nameof(value));\r\n            }\r\n\r\n            return _schoolDtoInputFormatter.Format(value);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest(variables!);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the AddSchoolData GraphQL operation\r\n    /// <code>\r\n    /// mutation AddSchoolData($schoolData: SchoolDtoInput!) {\r\n    ///   createSchool(school: $schoolData) {\r\n    ///     __typename\r\n    ///     school {\r\n    ///       __typename\r\n    ///       title\r\n    ///       ... on SchoolDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IAddSchoolDataMutation : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddSchoolDataResult>> ExecuteAsync(global::Catalogue.Client.SchoolDtoInput schoolData, global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddSchoolDataResult>> Watch(global::Catalogue.Client.SchoolDtoInput schoolData, global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the UpdateSchoolData GraphQL operation\r\n    /// <code>\r\n    /// mutation UpdateSchoolData($schoolData: SchoolDtoInput!) {\r\n    ///   updateSchool(school: $schoolData) {\r\n    ///     __typename\r\n    ///     school {\r\n    ///       __typename\r\n    ///       id\r\n    ///       title\r\n    ///       name\r\n    ///       ... on SchoolDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateSchoolDataMutationDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private UpdateSchoolDataMutationDocument()\r\n        {\r\n        }\r\n\r\n        public static UpdateSchoolDataMutationDocument Instance { get; } = new UpdateSchoolDataMutationDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x74, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x28, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x3a, 0x20, 0x24, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x74, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"f6759692e8ce7aab5bedd85022f4543b\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\r\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the UpdateSchoolData GraphQL operation\r\n    /// <code>\r\n    /// mutation UpdateSchoolData($schoolData: SchoolDtoInput!) {\r\n    ///   updateSchool(school: $schoolData) {\r\n    ///     __typename\r\n    ///     school {\r\n    ///       __typename\r\n    ///       id\r\n    ///       title\r\n    ///       name\r\n    ///       ... on SchoolDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateSchoolDataMutation : global::Catalogue.Client.IUpdateSchoolDataMutation\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IUpdateSchoolDataResult> _operationExecutor;\r\n        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _schoolDtoInputFormatter;\r\n        public UpdateSchoolDataMutation(global::StrawberryShake.IOperationExecutor<IUpdateSchoolDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n            _schoolDtoInputFormatter = serializerResolver.GetInputValueFormatter(\"SchoolDtoInput\");\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateSchoolDataResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateSchoolDataResult>> ExecuteAsync(global::Catalogue.Client.SchoolDtoInput schoolData, global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest(schoolData);\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateSchoolDataResult>> Watch(global::Catalogue.Client.SchoolDtoInput schoolData, global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest(schoolData);\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::Catalogue.Client.SchoolDtoInput schoolData)\r\n        {\r\n            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();\r\n            variables.Add(\"schoolData\", FormatSchoolData(schoolData));\r\n            return CreateRequest(variables);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: UpdateSchoolDataMutationDocument.Instance.Hash.Value, name: \"UpdateSchoolData\", document: UpdateSchoolDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);\r\n        }\r\n\r\n        private global::System.Object? FormatSchoolData(global::Catalogue.Client.SchoolDtoInput value)\r\n        {\r\n            if (value is null)\r\n            {\r\n                throw new global::System.ArgumentNullException(nameof(value));\r\n            }\r\n\r\n            return _schoolDtoInputFormatter.Format(value);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest(variables!);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the UpdateSchoolData GraphQL operation\r\n    /// <code>\r\n    /// mutation UpdateSchoolData($schoolData: SchoolDtoInput!) {\r\n    ///   updateSchool(school: $schoolData) {\r\n    ///     __typename\r\n    ///     school {\r\n    ///       __typename\r\n    ///       id\r\n    ///       title\r\n    ///       name\r\n    ///       ... on SchoolDto {\r\n    ///         id\r\n    ///       }\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IUpdateSchoolDataMutation : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateSchoolDataResult>> ExecuteAsync(global::Catalogue.Client.SchoolDtoInput schoolData, global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateSchoolDataResult>> Watch(global::Catalogue.Client.SchoolDtoInput schoolData, global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetCourseList GraphQL operation\r\n    /// <code>\r\n    /// query GetCourseList {\r\n    ///   courseList {\r\n    ///     __typename\r\n    ///     id\r\n    ///     code\r\n    ///     title\r\n    ///     creditHours\r\n    ///     ... on Course {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetCourseListQueryDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private GetCourseListQueryDocument()\r\n        {\r\n        }\r\n\r\n        public static GetCourseListQueryDocument Instance { get; } = new GetCourseListQueryDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"7e1540dd5a05e3fcbb266a14b565dd81\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\r\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetCourseList GraphQL operation\r\n    /// <code>\r\n    /// query GetCourseList {\r\n    ///   courseList {\r\n    ///     __typename\r\n    ///     id\r\n    ///     code\r\n    ///     title\r\n    ///     creditHours\r\n    ///     ... on Course {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetCourseListQuery : global::Catalogue.Client.IGetCourseListQuery\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IGetCourseListResult> _operationExecutor;\r\n        public GetCourseListQuery(global::StrawberryShake.IOperationExecutor<IGetCourseListResult> operationExecutor)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCourseListResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCourseListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest();\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCourseListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest();\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest()\r\n        {\r\n            return CreateRequest(null);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: GetCourseListQueryDocument.Instance.Hash.Value, name: \"GetCourseList\", document: GetCourseListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetCourseList GraphQL operation\r\n    /// <code>\r\n    /// query GetCourseList {\r\n    ///   courseList {\r\n    ///     __typename\r\n    ///     id\r\n    ///     code\r\n    ///     title\r\n    ///     creditHours\r\n    ///     ... on Course {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IGetCourseListQuery : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCourseListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCourseListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetSchoolList GraphQL operation\r\n    /// <code>\r\n    /// query GetSchoolList {\r\n    ///   allSchools {\r\n    ///     __typename\r\n    ///     id\r\n    ///     title\r\n    ///     name\r\n    ///     ... on School {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetSchoolListQueryDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private GetSchoolListQueryDocument()\r\n        {\r\n        }\r\n\r\n        public static GetSchoolListQueryDocument Instance { get; } = new GetSchoolListQueryDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"583b9913664d8f7cc768e4c05c4568b9\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\r\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetSchoolList GraphQL operation\r\n    /// <code>\r\n    /// query GetSchoolList {\r\n    ///   allSchools {\r\n    ///     __typename\r\n    ///     id\r\n    ///     title\r\n    ///     name\r\n    ///     ... on School {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetSchoolListQuery : global::Catalogue.Client.IGetSchoolListQuery\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IGetSchoolListResult> _operationExecutor;\r\n        public GetSchoolListQuery(global::StrawberryShake.IOperationExecutor<IGetSchoolListResult> operationExecutor)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSchoolListResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSchoolListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest();\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSchoolListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest();\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest()\r\n        {\r\n            return CreateRequest(null);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: GetSchoolListQueryDocument.Instance.Hash.Value, name: \"GetSchoolList\", document: GetSchoolListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetSchoolList GraphQL operation\r\n    /// <code>\r\n    /// query GetSchoolList {\r\n    ///   allSchools {\r\n    ///     __typename\r\n    ///     id\r\n    ///     title\r\n    ///     name\r\n    ///     ... on School {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface IGetSchoolListQuery : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSchoolListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSchoolListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the CatalogueClient GraphQL client\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class CatalogueClient : global::Catalogue.Client.ICatalogueClient\r\n    {\r\n        private readonly global::Catalogue.Client.IAddCourseDataMutation _addCourseData;\r\n        private readonly global::Catalogue.Client.IUpdateCourseDataMutation _updateCourseData;\r\n        private readonly global::Catalogue.Client.IAddSchoolDataMutation _addSchoolData;\r\n        private readonly global::Catalogue.Client.IUpdateSchoolDataMutation _updateSchoolData;\r\n        private readonly global::Catalogue.Client.IGetCourseListQuery _getCourseList;\r\n        private readonly global::Catalogue.Client.IGetSchoolListQuery _getSchoolList;\r\n        public CatalogueClient(global::Catalogue.Client.IAddCourseDataMutation addCourseData, global::Catalogue.Client.IUpdateCourseDataMutation updateCourseData, global::Catalogue.Client.IAddSchoolDataMutation addSchoolData, global::Catalogue.Client.IUpdateSchoolDataMutation updateSchoolData, global::Catalogue.Client.IGetCourseListQuery getCourseList, global::Catalogue.Client.IGetSchoolListQuery getSchoolList)\r\n        {\r\n            _addCourseData = addCourseData ?? throw new global::System.ArgumentNullException(nameof(addCourseData));\r\n            _updateCourseData = updateCourseData ?? throw new global::System.ArgumentNullException(nameof(updateCourseData));\r\n            _addSchoolData = addSchoolData ?? throw new global::System.ArgumentNullException(nameof(addSchoolData));\r\n            _updateSchoolData = updateSchoolData ?? throw new global::System.ArgumentNullException(nameof(updateSchoolData));\r\n            _getCourseList = getCourseList ?? throw new global::System.ArgumentNullException(nameof(getCourseList));\r\n            _getSchoolList = getSchoolList ?? throw new global::System.ArgumentNullException(nameof(getSchoolList));\r\n        }\r\n\r\n        public static global::System.String ClientName => \"CatalogueClient\";\r\n        public global::Catalogue.Client.IAddCourseDataMutation AddCourseData => _addCourseData;\r\n        public global::Catalogue.Client.IUpdateCourseDataMutation UpdateCourseData => _updateCourseData;\r\n        public global::Catalogue.Client.IAddSchoolDataMutation AddSchoolData => _addSchoolData;\r\n        public global::Catalogue.Client.IUpdateSchoolDataMutation UpdateSchoolData => _updateSchoolData;\r\n        public global::Catalogue.Client.IGetCourseListQuery GetCourseList => _getCourseList;\r\n        public global::Catalogue.Client.IGetSchoolListQuery GetSchoolList => _getSchoolList;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the CatalogueClient GraphQL client\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial interface ICatalogueClient\r\n    {\r\n        global::Catalogue.Client.IAddCourseDataMutation AddCourseData { get; }\r\n\r\n        global::Catalogue.Client.IUpdateCourseDataMutation UpdateCourseData { get; }\r\n\r\n        global::Catalogue.Client.IAddSchoolDataMutation AddSchoolData { get; }\r\n\r\n        global::Catalogue.Client.IUpdateSchoolDataMutation UpdateSchoolData { get; }\r\n\r\n        global::Catalogue.Client.IGetCourseListQuery GetCourseList { get; }\r\n\r\n        global::Catalogue.Client.IGetSchoolListQuery GetSchoolList { get; }\r\n    }\r\n}\r\n\r\nnamespace Catalogue.Client.State\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class CourseDtoEntity\r\n    {\r\n        public CourseDtoEntity(global::System.String? title = default !)\r\n        {\r\n            Title = title;\r\n        }\r\n\r\n        public global::System.String? Title { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class SchoolDtoEntity\r\n    {\r\n        public SchoolDtoEntity(global::System.String? title = default !, global::System.Int32? id = default !, global::System.String? name = default !)\r\n        {\r\n            Title = title;\r\n            Id = id;\r\n            Name = name;\r\n        }\r\n\r\n        public global::System.String? Title { get; }\r\n\r\n        public global::System.Int32? Id { get; }\r\n\r\n        public global::System.String? Name { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class CourseEntity\r\n    {\r\n        public CourseEntity(global::System.Int32 id = default !, global::System.String code = default !, global::System.String title = default !, global::System.Double creditHours = default !)\r\n        {\r\n            Id = id;\r\n            Code = code;\r\n            Title = title;\r\n            CreditHours = creditHours;\r\n        }\r\n\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String Code { get; }\r\n\r\n        public global::System.String Title { get; }\r\n\r\n        public global::System.Double CreditHours { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class SchoolEntity\r\n    {\r\n        public SchoolEntity(global::System.Int32 id = default !, global::System.String title = default !, global::System.String name = default !)\r\n        {\r\n            Id = id;\r\n            Title = title;\r\n            Name = name;\r\n        }\r\n\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String Title { get; }\r\n\r\n        public global::System.String Name { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddCourseDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.AddCourseDataResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, AddCourseData_AddCourse_Course_CourseDto> _addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper;\r\n        public AddCourseDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, AddCourseData_AddCourse_Course_CourseDto> addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper = addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IAddCourseDataResult);\r\n        public AddCourseDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is AddCourseDataResultInfo info)\r\n            {\r\n                return new AddCourseDataResult(MapNonNullableIAddCourseData_AddCourse(info.AddCourse, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"AddCourseDataResultInfo expected.\");\r\n        }\r\n\r\n        private global::Catalogue.Client.IAddCourseData_AddCourse MapNonNullableIAddCourseData_AddCourse(global::Catalogue.Client.State.AddCoursePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            IAddCourseData_AddCourse returnValue = default !;\r\n            if (data.__typename.Equals(\"AddCoursePayload\", global::System.StringComparison.Ordinal))\r\n            {\r\n                returnValue = new AddCourseData_AddCourse_AddCoursePayload(MapNonNullableIAddCourseData_AddCourse_Course(data.Course ?? throw new global::System.ArgumentNullException(), snapshot));\r\n            }\r\n            else\r\n            {\r\n                throw new global::System.NotSupportedException();\r\n            }\r\n\r\n            return returnValue;\r\n        }\r\n\r\n        private global::Catalogue.Client.IAddCourseData_AddCourse_Course MapNonNullableIAddCourseData_AddCourse_Course(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId.Name.Equals(\"CourseDto\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _addCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.CourseDtoEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddCourseDataResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public AddCourseDataResultInfo(global::Catalogue.Client.State.AddCoursePayloadData addCourse, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            AddCourse = addCourse;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Add a new course data.\r\n        /// </summary>\r\n        public global::Catalogue.Client.State.AddCoursePayloadData AddCourse { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new AddCourseDataResultInfo(AddCourse, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, AddCourseData_AddCourse_Course_CourseDto>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public AddCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public AddCourseData_AddCourse_Course_CourseDto Map(global::Catalogue.Client.State.CourseDtoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new AddCourseData_AddCourse_Course_CourseDto(entity.Title);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateCourseDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.UpdateCourseDataResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, UpdateCourseData_UpdateCourse_Course_CourseDto> _updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper;\r\n        public UpdateCourseDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, UpdateCourseData_UpdateCourse_Course_CourseDto> updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper = updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IUpdateCourseDataResult);\r\n        public UpdateCourseDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is UpdateCourseDataResultInfo info)\r\n            {\r\n                return new UpdateCourseDataResult(MapNonNullableIUpdateCourseData_UpdateCourse(info.UpdateCourse, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"UpdateCourseDataResultInfo expected.\");\r\n        }\r\n\r\n        private global::Catalogue.Client.IUpdateCourseData_UpdateCourse MapNonNullableIUpdateCourseData_UpdateCourse(global::Catalogue.Client.State.AddCoursePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            IUpdateCourseData_UpdateCourse returnValue = default !;\r\n            if (data.__typename.Equals(\"AddCoursePayload\", global::System.StringComparison.Ordinal))\r\n            {\r\n                returnValue = new UpdateCourseData_UpdateCourse_AddCoursePayload(MapNonNullableIUpdateCourseData_UpdateCourse_Course(data.Course ?? throw new global::System.ArgumentNullException(), snapshot));\r\n            }\r\n            else\r\n            {\r\n                throw new global::System.NotSupportedException();\r\n            }\r\n\r\n            return returnValue;\r\n        }\r\n\r\n        private global::Catalogue.Client.IUpdateCourseData_UpdateCourse_Course MapNonNullableIUpdateCourseData_UpdateCourse_Course(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId.Name.Equals(\"CourseDto\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _updateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.CourseDtoEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateCourseDataResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public UpdateCourseDataResultInfo(global::Catalogue.Client.State.AddCoursePayloadData updateCourse, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            UpdateCourse = updateCourse;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Course Update\r\n        /// </summary>\r\n        public global::Catalogue.Client.State.AddCoursePayloadData UpdateCourse { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new UpdateCourseDataResultInfo(UpdateCourse, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, UpdateCourseData_UpdateCourse_Course_CourseDto>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public UpdateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public UpdateCourseData_UpdateCourse_Course_CourseDto Map(global::Catalogue.Client.State.CourseDtoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new UpdateCourseData_UpdateCourse_Course_CourseDto(entity.Title);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddSchoolDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.AddSchoolDataResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, AddSchoolData_CreateSchool_School_SchoolDto> _addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper;\r\n        public AddSchoolDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, AddSchoolData_CreateSchool_School_SchoolDto> addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper = addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IAddSchoolDataResult);\r\n        public AddSchoolDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is AddSchoolDataResultInfo info)\r\n            {\r\n                return new AddSchoolDataResult(MapNonNullableIAddSchoolData_CreateSchool(info.CreateSchool, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"AddSchoolDataResultInfo expected.\");\r\n        }\r\n\r\n        private global::Catalogue.Client.IAddSchoolData_CreateSchool MapNonNullableIAddSchoolData_CreateSchool(global::Catalogue.Client.State.AddEditSchoolPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            IAddSchoolData_CreateSchool returnValue = default !;\r\n            if (data.__typename.Equals(\"AddEditSchoolPayload\", global::System.StringComparison.Ordinal))\r\n            {\r\n                returnValue = new AddSchoolData_CreateSchool_AddEditSchoolPayload(MapNonNullableIAddSchoolData_CreateSchool_School(data.School ?? throw new global::System.ArgumentNullException(), snapshot));\r\n            }\r\n            else\r\n            {\r\n                throw new global::System.NotSupportedException();\r\n            }\r\n\r\n            return returnValue;\r\n        }\r\n\r\n        private global::Catalogue.Client.IAddSchoolData_CreateSchool_School MapNonNullableIAddSchoolData_CreateSchool_School(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId.Name.Equals(\"SchoolDto\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _addSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.SchoolDtoEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddSchoolDataResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public AddSchoolDataResultInfo(global::Catalogue.Client.State.AddEditSchoolPayloadData createSchool, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            CreateSchool = createSchool;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Create the School.\r\n        /// </summary>\r\n        public global::Catalogue.Client.State.AddEditSchoolPayloadData CreateSchool { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new AddSchoolDataResultInfo(CreateSchool, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, AddSchoolData_CreateSchool_School_SchoolDto>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public AddSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public AddSchoolData_CreateSchool_School_SchoolDto Map(global::Catalogue.Client.State.SchoolDtoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new AddSchoolData_CreateSchool_School_SchoolDto(entity.Title);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateSchoolDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.UpdateSchoolDataResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, UpdateSchoolData_UpdateSchool_School_SchoolDto> _updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper;\r\n        public UpdateSchoolDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, UpdateSchoolData_UpdateSchool_School_SchoolDto> updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper = updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IUpdateSchoolDataResult);\r\n        public UpdateSchoolDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is UpdateSchoolDataResultInfo info)\r\n            {\r\n                return new UpdateSchoolDataResult(MapNonNullableIUpdateSchoolData_UpdateSchool(info.UpdateSchool, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"UpdateSchoolDataResultInfo expected.\");\r\n        }\r\n\r\n        private global::Catalogue.Client.IUpdateSchoolData_UpdateSchool MapNonNullableIUpdateSchoolData_UpdateSchool(global::Catalogue.Client.State.AddEditSchoolPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            IUpdateSchoolData_UpdateSchool returnValue = default !;\r\n            if (data.__typename.Equals(\"AddEditSchoolPayload\", global::System.StringComparison.Ordinal))\r\n            {\r\n                returnValue = new UpdateSchoolData_UpdateSchool_AddEditSchoolPayload(MapNonNullableIUpdateSchoolData_UpdateSchool_School(data.School ?? throw new global::System.ArgumentNullException(), snapshot));\r\n            }\r\n            else\r\n            {\r\n                throw new global::System.NotSupportedException();\r\n            }\r\n\r\n            return returnValue;\r\n        }\r\n\r\n        private global::Catalogue.Client.IUpdateSchoolData_UpdateSchool_School MapNonNullableIUpdateSchoolData_UpdateSchool_School(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId.Name.Equals(\"SchoolDto\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _updateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.SchoolDtoEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateSchoolDataResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public UpdateSchoolDataResultInfo(global::Catalogue.Client.State.AddEditSchoolPayloadData updateSchool, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            UpdateSchool = updateSchool;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Update the School.\r\n        /// </summary>\r\n        public global::Catalogue.Client.State.AddEditSchoolPayloadData UpdateSchool { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new UpdateSchoolDataResultInfo(UpdateSchool, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, UpdateSchoolData_UpdateSchool_School_SchoolDto>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public UpdateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public UpdateSchoolData_UpdateSchool_School_SchoolDto Map(global::Catalogue.Client.State.SchoolDtoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new UpdateSchoolData_UpdateSchool_School_SchoolDto(entity.Id, entity.Title, entity.Name);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetCourseListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.GetCourseListResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseEntity, GetCourseList_CourseList_Course> _getCourseList_CourseList_CourseFromCourseEntityMapper;\r\n        public GetCourseListResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseEntity, GetCourseList_CourseList_Course> getCourseList_CourseList_CourseFromCourseEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _getCourseList_CourseList_CourseFromCourseEntityMapper = getCourseList_CourseList_CourseFromCourseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCourseList_CourseList_CourseFromCourseEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IGetCourseListResult);\r\n        public GetCourseListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is GetCourseListResultInfo info)\r\n            {\r\n                return new GetCourseListResult(MapNonNullableIGetCourseList_CourseListNonNullableArray(info.CourseList, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"GetCourseListResultInfo expected.\");\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetCourseList_CourseList> MapNonNullableIGetCourseList_CourseListNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (list is null)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            var courses = new global::System.Collections.Generic.List<global::Catalogue.Client.IGetCourseList_CourseList>();\r\n            foreach (global::StrawberryShake.EntityId child in list)\r\n            {\r\n                courses.Add(MapNonNullableIGetCourseList_CourseList(child, snapshot));\r\n            }\r\n\r\n            return courses;\r\n        }\r\n\r\n        private global::Catalogue.Client.IGetCourseList_CourseList MapNonNullableIGetCourseList_CourseList(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId.Name.Equals(\"Course\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _getCourseList_CourseList_CourseFromCourseEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.CourseEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetCourseListResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public GetCourseListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> courseList, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            CourseList = courseList;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets the list of Course.\r\n        /// </summary>\r\n        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> CourseList { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new GetCourseListResultInfo(CourseList, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetCourseList_CourseList_CourseFromCourseEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseEntity, GetCourseList_CourseList_Course>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public GetCourseList_CourseList_CourseFromCourseEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public GetCourseList_CourseList_Course Map(global::Catalogue.Client.State.CourseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new GetCourseList_CourseList_Course(entity.Id, entity.Code, entity.Title, entity.CreditHours);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetSchoolListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.GetSchoolListResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolEntity, GetSchoolList_AllSchools_School> _getSchoolList_AllSchools_SchoolFromSchoolEntityMapper;\r\n        public GetSchoolListResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolEntity, GetSchoolList_AllSchools_School> getSchoolList_AllSchools_SchoolFromSchoolEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _getSchoolList_AllSchools_SchoolFromSchoolEntityMapper = getSchoolList_AllSchools_SchoolFromSchoolEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSchoolList_AllSchools_SchoolFromSchoolEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Catalogue.Client.IGetSchoolListResult);\r\n        public GetSchoolListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is GetSchoolListResultInfo info)\r\n            {\r\n                return new GetSchoolListResult(MapNonNullableIGetSchoolList_AllSchoolsNonNullableArray(info.AllSchools, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"GetSchoolListResultInfo expected.\");\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::Catalogue.Client.IGetSchoolList_AllSchools> MapNonNullableIGetSchoolList_AllSchoolsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (list is null)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            var schools = new global::System.Collections.Generic.List<global::Catalogue.Client.IGetSchoolList_AllSchools>();\r\n            foreach (global::StrawberryShake.EntityId child in list)\r\n            {\r\n                schools.Add(MapNonNullableIGetSchoolList_AllSchools(child, snapshot));\r\n            }\r\n\r\n            return schools;\r\n        }\r\n\r\n        private global::Catalogue.Client.IGetSchoolList_AllSchools MapNonNullableIGetSchoolList_AllSchools(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId.Name.Equals(\"School\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _getSchoolList_AllSchools_SchoolFromSchoolEntityMapper.Map(snapshot.GetEntity<global::Catalogue.Client.State.SchoolEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetSchoolListResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public GetSchoolListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> allSchools, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            AllSchools = allSchools;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets the list of School.\r\n        /// </summary>\r\n        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> AllSchools { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new GetSchoolListResultInfo(AllSchools, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetSchoolList_AllSchools_SchoolFromSchoolEntityMapper : global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolEntity, GetSchoolList_AllSchools_School>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public GetSchoolList_AllSchools_SchoolFromSchoolEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public GetSchoolList_AllSchools_School Map(global::Catalogue.Client.State.SchoolEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new GetSchoolList_AllSchools_School(entity.Id, entity.Title, entity.Name);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    internal interface ICourseDtoInputInfo\r\n    {\r\n        global::System.Boolean IsIdSet { get; }\r\n\r\n        global::System.Boolean IsCodeSet { get; }\r\n\r\n        global::System.Boolean IsTitleSet { get; }\r\n\r\n        global::System.Boolean IsCreditHoursSet { get; }\r\n\r\n        global::System.Boolean IsSchoolIdSet { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    internal interface ISchoolDtoInputInfo\r\n    {\r\n        global::System.Boolean IsIdSet { get; }\r\n\r\n        global::System.Boolean IsTitleSet { get; }\r\n\r\n        global::System.Boolean IsNameSet { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddCourseDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddCourseDataResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddCourseDataResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;\r\n        public AddCourseDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddCourseDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>(\"Float\") ?? throw new global::System.ArgumentException(\"No serializer for type `Float` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IAddCourseDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IAddCourseDataResult Result, AddCourseDataResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (response.Body != null && response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                {\r\n                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                }\r\n                else\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IAddCourseDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IAddCourseDataResult, AddCourseDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::Catalogue.Client.State.AddCoursePayloadData addCourseId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                addCourseId = DeserializeNonNullableIAddCourseData_AddCourse(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"addCourse\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new AddCourseDataResultInfo(addCourseId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::Catalogue.Client.State.AddCoursePayloadData DeserializeNonNullableIAddCourseData_AddCourse(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            var typename = obj.Value.GetProperty(\"__typename\").GetString();\r\n            if (typename?.Equals(\"AddCoursePayload\", global::System.StringComparison.Ordinal) ?? false)\r\n            {\r\n                return new global::Catalogue.Client.State.AddCoursePayloadData(typename, course: UpdateNonNullableIAddCourseData_AddCourse_CourseEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"course\"), entityIds));\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId UpdateNonNullableIAddCourseData_AddCourse_CourseEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"CourseDto\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.CourseDtoEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\"))));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\"))));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return _stringParser.Parse(obj.Value.GetString()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateCourseDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateCourseDataResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateCourseDataResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;\r\n        public UpdateCourseDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateCourseDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>(\"Float\") ?? throw new global::System.ArgumentException(\"No serializer for type `Float` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IUpdateCourseDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IUpdateCourseDataResult Result, UpdateCourseDataResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (response.Body != null && response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                {\r\n                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                }\r\n                else\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IUpdateCourseDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IUpdateCourseDataResult, UpdateCourseDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::Catalogue.Client.State.AddCoursePayloadData updateCourseId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                updateCourseId = DeserializeNonNullableIUpdateCourseData_UpdateCourse(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"updateCourse\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new UpdateCourseDataResultInfo(updateCourseId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::Catalogue.Client.State.AddCoursePayloadData DeserializeNonNullableIUpdateCourseData_UpdateCourse(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            var typename = obj.Value.GetProperty(\"__typename\").GetString();\r\n            if (typename?.Equals(\"AddCoursePayload\", global::System.StringComparison.Ordinal) ?? false)\r\n            {\r\n                return new global::Catalogue.Client.State.AddCoursePayloadData(typename, course: UpdateNonNullableIUpdateCourseData_UpdateCourse_CourseEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"course\"), entityIds));\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId UpdateNonNullableIUpdateCourseData_UpdateCourse_CourseEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"CourseDto\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.CourseDtoEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\"))));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\"))));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return _stringParser.Parse(obj.Value.GetString()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddSchoolDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddSchoolDataResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddSchoolDataResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        public AddSchoolDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddSchoolDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IAddSchoolDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IAddSchoolDataResult Result, AddSchoolDataResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (response.Body != null && response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                {\r\n                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                }\r\n                else\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IAddSchoolDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IAddSchoolDataResult, AddSchoolDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::Catalogue.Client.State.AddEditSchoolPayloadData createSchoolId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                createSchoolId = DeserializeNonNullableIAddSchoolData_CreateSchool(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"createSchool\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new AddSchoolDataResultInfo(createSchoolId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::Catalogue.Client.State.AddEditSchoolPayloadData DeserializeNonNullableIAddSchoolData_CreateSchool(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            var typename = obj.Value.GetProperty(\"__typename\").GetString();\r\n            if (typename?.Equals(\"AddEditSchoolPayload\", global::System.StringComparison.Ordinal) ?? false)\r\n            {\r\n                return new global::Catalogue.Client.State.AddEditSchoolPayloadData(typename, school: UpdateNonNullableIAddSchoolData_CreateSchool_SchoolEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"school\"), entityIds));\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId UpdateNonNullableIAddSchoolData_CreateSchool_SchoolEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"SchoolDto\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.SchoolDtoEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\")), entity.Id, entity.Name));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\")), default !, default !));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return _stringParser.Parse(obj.Value.GetString()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class UpdateSchoolDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateSchoolDataResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateSchoolDataResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        public UpdateSchoolDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateSchoolDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IUpdateSchoolDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IUpdateSchoolDataResult Result, UpdateSchoolDataResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (response.Body != null && response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                {\r\n                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                }\r\n                else\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IUpdateSchoolDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IUpdateSchoolDataResult, UpdateSchoolDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::Catalogue.Client.State.AddEditSchoolPayloadData updateSchoolId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                updateSchoolId = DeserializeNonNullableIUpdateSchoolData_UpdateSchool(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"updateSchool\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new UpdateSchoolDataResultInfo(updateSchoolId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::Catalogue.Client.State.AddEditSchoolPayloadData DeserializeNonNullableIUpdateSchoolData_UpdateSchool(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            var typename = obj.Value.GetProperty(\"__typename\").GetString();\r\n            if (typename?.Equals(\"AddEditSchoolPayload\", global::System.StringComparison.Ordinal) ?? false)\r\n            {\r\n                return new global::Catalogue.Client.State.AddEditSchoolPayloadData(typename, school: UpdateNonNullableIUpdateSchoolData_UpdateSchool_SchoolEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"school\"), entityIds));\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId UpdateNonNullableIUpdateSchoolData_UpdateSchool_SchoolEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"SchoolDto\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.SchoolDtoEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"name\"))));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolDtoEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"name\"))));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return _intParser.Parse(obj.Value.GetInt32()!);\r\n        }\r\n\r\n        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return _stringParser.Parse(obj.Value.GetString()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetCourseListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetCourseListResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetCourseListResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;\r\n        public GetCourseListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetCourseListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>(\"Float\") ?? throw new global::System.ArgumentException(\"No serializer for type `Float` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IGetCourseListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IGetCourseListResult Result, GetCourseListResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (response.Body != null && response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                {\r\n                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                }\r\n                else\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IGetCourseListResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IGetCourseListResult, GetCourseListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> courseListId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                courseListId = UpdateNonNullableIGetCourseList_CourseListEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"courseList\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new GetCourseListResultInfo(courseListId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetCourseList_CourseListEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            var courses = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();\r\n            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())\r\n            {\r\n                courses.Add(UpdateNonNullableIGetCourseList_CourseListEntity(session, child, entityIds));\r\n            }\r\n\r\n            return courses;\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId UpdateNonNullableIGetCourseList_CourseListEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"Course\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.CourseEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"code\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"creditHours\"))));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.CourseEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"code\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"creditHours\"))));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _intParser.Parse(obj.Value.GetInt32()!);\r\n        }\r\n\r\n        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _stringParser.Parse(obj.Value.GetString()!);\r\n        }\r\n\r\n        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _floatParser.Parse(obj.Value.GetDouble()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class GetSchoolListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetSchoolListResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetSchoolListResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        public GetSchoolListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetSchoolListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IGetSchoolListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IGetSchoolListResult Result, GetSchoolListResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (response.Body != null && response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                {\r\n                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                }\r\n                else\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IGetSchoolListResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IGetSchoolListResult, GetSchoolListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> allSchoolsId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                allSchoolsId = UpdateNonNullableIGetSchoolList_AllSchoolsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"allSchools\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new GetSchoolListResultInfo(allSchoolsId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetSchoolList_AllSchoolsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            var schools = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();\r\n            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())\r\n            {\r\n                schools.Add(UpdateNonNullableIGetSchoolList_AllSchoolsEntity(session, child, entityIds));\r\n            }\r\n\r\n            return schools;\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId UpdateNonNullableIGetSchoolList_AllSchoolsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"School\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Catalogue.Client.State.SchoolEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"name\"))));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::Catalogue.Client.State.SchoolEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"name\"))));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _intParser.Parse(obj.Value.GetInt32()!);\r\n        }\r\n\r\n        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _stringParser.Parse(obj.Value.GetString()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddCoursePayloadData\r\n    {\r\n        public AddCoursePayloadData(global::System.String __typename, global::StrawberryShake.EntityId? course = default !)\r\n        {\r\n            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));\r\n            Course = course;\r\n        }\r\n\r\n        public global::System.String __typename { get; }\r\n\r\n        public global::StrawberryShake.EntityId? Course { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class AddEditSchoolPayloadData\r\n    {\r\n        public AddEditSchoolPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? school = default !)\r\n        {\r\n            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));\r\n            School = school;\r\n        }\r\n\r\n        public global::System.String __typename { get; }\r\n\r\n        public global::StrawberryShake.EntityId? School { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class CatalogueClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer\r\n    {\r\n        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()\r\n        {Indented = false};\r\n        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            global::System.String __typename = obj.GetProperty(\"__typename\").GetString()!;\r\n            return __typename switch\r\n            {\r\n                \"CourseDto\" => ParseCourseDtoEntityId(obj, __typename),\r\n                \"SchoolDto\" => ParseSchoolDtoEntityId(obj, __typename),\r\n                \"Course\" => ParseCourseEntityId(obj, __typename),\r\n                \"School\" => ParseSchoolEntityId(obj, __typename),\r\n                _ => throw new global::System.NotSupportedException()};\r\n        }\r\n\r\n        public global::System.String Format(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            return entityId.Name switch\r\n            {\r\n                \"CourseDto\" => FormatCourseDtoEntityId(entityId),\r\n                \"SchoolDto\" => FormatSchoolDtoEntityId(entityId),\r\n                \"Course\" => FormatCourseEntityId(entityId),\r\n                \"School\" => FormatSchoolEntityId(entityId),\r\n                _ => throw new global::System.NotSupportedException()};\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId ParseCourseDtoEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)\r\n        {\r\n            return new global::StrawberryShake.EntityId(type, obj.GetProperty(\"id\").GetInt32()!);\r\n        }\r\n\r\n        private global::System.String FormatCourseDtoEntityId(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            using var writer = new global::StrawberryShake.Internal.ArrayWriter();\r\n            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);\r\n            jsonWriter.WriteStartObject();\r\n            jsonWriter.WriteString(\"__typename\", entityId.Name);\r\n            jsonWriter.WriteNumber(\"id\", (global::System.Int32)entityId.Value);\r\n            jsonWriter.WriteEndObject();\r\n            jsonWriter.Flush();\r\n            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId ParseSchoolDtoEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)\r\n        {\r\n            return new global::StrawberryShake.EntityId(type, obj.GetProperty(\"id\").GetInt32()!);\r\n        }\r\n\r\n        private global::System.String FormatSchoolDtoEntityId(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            using var writer = new global::StrawberryShake.Internal.ArrayWriter();\r\n            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);\r\n            jsonWriter.WriteStartObject();\r\n            jsonWriter.WriteString(\"__typename\", entityId.Name);\r\n            jsonWriter.WriteNumber(\"id\", (global::System.Int32)entityId.Value);\r\n            jsonWriter.WriteEndObject();\r\n            jsonWriter.Flush();\r\n            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId ParseCourseEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)\r\n        {\r\n            return new global::StrawberryShake.EntityId(type, obj.GetProperty(\"id\").GetInt32()!);\r\n        }\r\n\r\n        private global::System.String FormatCourseEntityId(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            using var writer = new global::StrawberryShake.Internal.ArrayWriter();\r\n            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);\r\n            jsonWriter.WriteStartObject();\r\n            jsonWriter.WriteString(\"__typename\", entityId.Name);\r\n            jsonWriter.WriteNumber(\"id\", (global::System.Int32)entityId.Value);\r\n            jsonWriter.WriteEndObject();\r\n            jsonWriter.Flush();\r\n            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId ParseSchoolEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)\r\n        {\r\n            return new global::StrawberryShake.EntityId(type, obj.GetProperty(\"id\").GetInt32()!);\r\n        }\r\n\r\n        private global::System.String FormatSchoolEntityId(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            using var writer = new global::StrawberryShake.Internal.ArrayWriter();\r\n            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);\r\n            jsonWriter.WriteStartObject();\r\n            jsonWriter.WriteString(\"__typename\", entityId.Name);\r\n            jsonWriter.WriteNumber(\"id\", (global::System.Int32)entityId.Value);\r\n            jsonWriter.WriteEndObject();\r\n            jsonWriter.Flush();\r\n            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public partial class CatalogueClientStoreAccessor : global::StrawberryShake.StoreAccessor\r\n    {\r\n        public CatalogueClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\nnamespace Microsoft.Extensions.DependencyInjection\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.12.0.0\")]\r\n    public static partial class CatalogueClientServiceCollectionExtensions\r\n    {\r\n        public static global::StrawberryShake.IClientBuilder<global::Catalogue.Client.State.CatalogueClientStoreAccessor> AddCatalogueClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\r\n        {\r\n            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>\r\n            {\r\n                ConfigureClientDefault(sp, serviceCollection, strategy);\r\n                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));\r\n            });\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Catalogue.Client.State.CatalogueClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.AddCourseDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.UpdateCourseDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.AddSchoolDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.UpdateSchoolDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.GetCourseListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.GetSchoolListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.CatalogueClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.ICatalogueClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            return new global::StrawberryShake.ClientBuilder<global::Catalogue.Client.State.CatalogueClientStoreAccessor>(\"CatalogueClient\", services, serviceCollection);\r\n        }\r\n\r\n        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\r\n        {\r\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>\r\n            {\r\n                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);\r\n                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient(\"CatalogueClient\"));\r\n            });\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, global::Catalogue.Client.AddCourseData_AddCourse_Course_CourseDto>, global::Catalogue.Client.State.AddCourseData_AddCourse_Course_CourseDtoFromCourseDtoEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseDtoEntity, global::Catalogue.Client.UpdateCourseData_UpdateCourse_Course_CourseDto>, global::Catalogue.Client.State.UpdateCourseData_UpdateCourse_Course_CourseDtoFromCourseDtoEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, global::Catalogue.Client.AddSchoolData_CreateSchool_School_SchoolDto>, global::Catalogue.Client.State.AddSchoolData_CreateSchool_School_SchoolDtoFromSchoolDtoEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolDtoEntity, global::Catalogue.Client.UpdateSchoolData_UpdateSchool_School_SchoolDto>, global::Catalogue.Client.State.UpdateSchoolData_UpdateSchool_School_SchoolDtoFromSchoolDtoEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.CourseEntity, global::Catalogue.Client.GetCourseList_CourseList_Course>, global::Catalogue.Client.State.GetCourseList_CourseList_CourseFromCourseEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Catalogue.Client.State.SchoolEntity, global::Catalogue.Client.GetSchoolList_AllSchools_School>, global::Catalogue.Client.State.GetSchoolList_AllSchools_SchoolFromSchoolEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Catalogue.Client.CourseDtoInputInputValueFormatter>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Catalogue.Client.SchoolDtoInputInputValueFormatter>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddCourseDataResult>, global::Catalogue.Client.State.AddCourseDataResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddCourseDataResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IAddCourseDataMutation>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddCourseDataResult>, global::Catalogue.Client.State.AddCourseDataBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IAddCourseDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddCourseDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddCourseDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.AddCourseDataMutation>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IAddCourseDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.AddCourseDataMutation>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateCourseDataResult>, global::Catalogue.Client.State.UpdateCourseDataResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateCourseDataResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IUpdateCourseDataMutation>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateCourseDataResult>, global::Catalogue.Client.State.UpdateCourseDataBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IUpdateCourseDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateCourseDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateCourseDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.UpdateCourseDataMutation>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IUpdateCourseDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.UpdateCourseDataMutation>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddSchoolDataResult>, global::Catalogue.Client.State.AddSchoolDataResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IAddSchoolDataResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IAddSchoolDataMutation>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddSchoolDataResult>, global::Catalogue.Client.State.AddSchoolDataBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IAddSchoolDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddSchoolDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IAddSchoolDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.AddSchoolDataMutation>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IAddSchoolDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.AddSchoolDataMutation>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateSchoolDataResult>, global::Catalogue.Client.State.UpdateSchoolDataResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IUpdateSchoolDataResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IUpdateSchoolDataMutation>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateSchoolDataResult>, global::Catalogue.Client.State.UpdateSchoolDataBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IUpdateSchoolDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateSchoolDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IUpdateSchoolDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.UpdateSchoolDataMutation>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IUpdateSchoolDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.UpdateSchoolDataMutation>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetCourseListResult>, global::Catalogue.Client.State.GetCourseListResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetCourseListResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IGetCourseListQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetCourseListResult>, global::Catalogue.Client.State.GetCourseListBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IGetCourseListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetCourseListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetCourseListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.GetCourseListQuery>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IGetCourseListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.GetCourseListQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetSchoolListResult>, global::Catalogue.Client.State.GetSchoolListResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Catalogue.Client.IGetSchoolListResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.IGetSchoolListQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetSchoolListResult>, global::Catalogue.Client.State.GetSchoolListBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Catalogue.Client.IGetSchoolListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetSchoolListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Catalogue.Client.IGetSchoolListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.GetSchoolListQuery>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.IGetSchoolListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.GetSchoolListQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Catalogue.Client.State.CatalogueClientEntityIdFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.CatalogueClient>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Catalogue.Client.ICatalogueClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Catalogue.Client.CatalogueClient>(sp));\r\n            return services;\r\n        }\r\n\r\n        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable\r\n        {\r\n            private readonly System.IServiceProvider _provider;\r\n            public ClientServiceProvider(System.IServiceProvider provider)\r\n            {\r\n                _provider = provider;\r\n            }\r\n\r\n            public object? GetService(System.Type serviceType)\r\n            {\r\n                return _provider.GetService(serviceType);\r\n            }\r\n\r\n            public void Dispose()\r\n            {\r\n                if (_provider is System.IDisposable d)\r\n                {\r\n                    d.Dispose();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","Kind":0,"Hash":null,"Path":null}]